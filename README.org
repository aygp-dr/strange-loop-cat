#+TITLE: Strange Loop Cat: Category Theory Explorer
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: 2025-05-12
#+OPTIONS: toc:3 num:3 
#+PROPERTY: header-args:scheme :results output :exports both :eval yes
#+PROPERTY: header-args:guile :results output :exports both :eval yes :noweb yes
#+PROPERTY: header-args:mermaid :file images/diagrams/:results file :exports both
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

* Strange Loop Cat

This repository explores the beautiful connections between category theory, self-reference, and formal systems. Drawing inspiration from Douglas Hofstadter's "Gödel, Escher, Bach", it provides interactive explorations of categorical concepts with a focus on strange loops and recursive structures.

** Overview

Category theory offers a powerful mathematical framework for studying abstract structures and their relationships, while also providing insights into self-reference and strange loops. This project:

- Visualizes categorical concepts through interactive diagrams
- Implements categorical structures in Guile Scheme
- Explores the connections between formal systems, self-reference, and category theory
- Provides hands-on examples to build intuition for abstract concepts

** Quick Start

1. Clone this repository
2. Ensure you have the required dependencies:
   - GNU Emacs 30+
   - GNU Make
   - Guile Scheme 3.0+
   - Node.js (for Mermaid diagrams)
   - Python 3.9+ (for LLM utilities)

3. Install local dependencies:
   #+begin_src shell
   # Install Node.js dependencies
   npm install
   
   # Install Python dependencies with uv
   uv venv
   source .venv/bin/activate  # On Unix/macOS
   # or .venv\Scripts\activate on Windows
   uv pip install -r requirements.txt
   #+end_src

4. Generate the diagrams:
   #+begin_src shell
   make mermaid
   # Or use the npm script
   npm run generate-diagrams
   #+end_src

5. Open any of the interactive notebooks in Emacs with org-mode

** Interactive Notebooks

This repository contains five interactive org-mode notebooks that you can use to explore category theory concepts:

- [[file:examples/basics.org][Basics of Categories and Morphisms]] - Introduction to the fundamental concepts of categories, objects, morphisms, and composition
- [[file:examples/functors.org][Functors and Natural Transformations]] - Structure-preserving maps between categories and transformations between functors
- [[file:examples/yoneda.org][The Yoneda Lemma]] - An exploration of one of the most profound and fundamental results in category theory
- [[file:examples/monads.org][Monads and Computational Effects]] - Understanding monads as a powerful abstraction for managing computational effects
- [[file:examples/strange-loops.org][Strange Loops and Self-Reference]] - Examining self-reference, recursion, and tangled hierarchies with connection to Hofstadter's work

Each notebook contains executable code blocks that demonstrate the concepts discussed and can be tangled to generate standalone Scheme files.

** Resources

- [[https://ncatlab.org/nlab/show/category+theory][nLab: Category Theory]]
- [[https://en.wikipedia.org/wiki/Category_theory][Wikipedia: Category Theory]]
- [[https://arxiv.org/abs/1803.05316][Seven Sketches in Compositionality]] by Brendan Fong and David Spivak
- [[https://math.ucr.edu/home/baez/categories.html][John Baez: Categories, Quantization, and Much More]]
- Douglas Hofstadter's "Gödel, Escher, Bach: An Eternal Golden Braid"

** GEB Connection and Self-Reference

This project draws heavily from Douglas Hofstadter's seminal work "Gödel, Escher, Bach: An Eternal Golden Braid" (GEB). The concept of strange loops—processes that move through hierarchical levels and eventually return to their starting point—is central to both GEB and this project.

Some key connections explored in this repository:

- Category theory provides a formal framework for understanding self-reference
- Yoneda lemma as a category-theoretic form of "introspection"
- Fixed point operators and their relation to strange loops
- Tangled hierarchies in category theory
- Recursive structures and their categorical formalization

** Emacs Integration

This project is designed to be used with Emacs and org-mode:

- All examples are provided as literate org files
- Code blocks can be executed directly within Emacs
- Diagrams are generated using Mermaid integration
- noweb references allow for building complex examples incrementally
- Babel execution environment is pre-configured

** Python Utilities

The Python utilities in this project provide:

- Category theory structure extraction from org files
- Visual representation generation
- Integration with LLMs for exploring categorical concepts
- Tools for analyzing and exploring strange loops programmatically

** License

MIT License

Copyright (c) 2025 Jason Walsh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
