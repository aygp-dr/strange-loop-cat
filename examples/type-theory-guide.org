#+TITLE: Type Theory and Category Theory
#+AUTHOR: Strange Loop Cat Project
#+DATE: 2025-05-15
#+PROPERTY: header-args:scheme :noweb yes :results output :exports both
#+PROPERTY: header-args:mermaid :noweb yes :file ./images/diagrams/type-theory-guide.png
#+STARTUP: showall


** 1. Terminology and Definitions

*** 1.1 Type Theory Fundamentals

- /Type/: A collection of values sharing common properties
  - /Simple types/: Basic types like Int, Bool, String
  - /Compound types/: Types built from other types (e.g., lists, records)
  - /Dependent types/: Types depending on values (e.g., Vector n)
  - /Implementation/: Classification mechanism for values in a program

- /Type system/: Rules determining how types are assigned and checked
  - /Static typing/: Types checked at compile time
  - /Dynamic typing/: Types checked at runtime
  - /Strong typing/: Prevents operations between incompatible types
  - /Weak typing/: Allows certain operations between different types

- /Lambda calculus/: Formal system for function definition, application, and abstraction
  - /Untyped lambda calculus/: Original system with no type restrictions
  - /Simply typed lambda calculus (STLC)/: Lambda calculus with simple types
  - /System F/: Polymorphic lambda calculus with universal quantification
  - /Calculus of Constructions/: Dependent type theory with higher-order abstraction

- /Type inference/: Automatic deduction of types without explicit annotations
  - /Hindley-Milner/: Algorithm for ML-family languages
  - /Unification/: Core algorithm for type inference
  - /Type constraints/: Equations that must be satisfied in valid typing

- /Type constructors/: Operations that build new types from existing ones
  - /Product types/: Tuples, records (A × B)
  - /Sum types/: Variants, unions (A + B)
  - /Function types/: Type of functions from domain to codomain (A → B)
  - /Recursive types/: Types defined in terms of themselves (μX.F[X])

*** 1.2 Category Theory in Types

- /Cartesian closed category (CCC)/: Model of simply typed lambda calculus
  - /Products/: Implementation of tuples and records
  - /Exponentials/: Implementation of function types
  - /Terminal object/: Unit type
  - /Example/: Category of sets, Category of types in a programming language

- /Initial/terminal objects in types/:
  - /Initial object (0)/: Empty type/Void/Nothing (no values)
  - /Terminal object (1)/: Unit type/Unit/() (exactly one value)
  - /Implementation/: =Void= or =Never= types, =Unit= or =()= types

- /Products and coproducts/:
  - /Product (A × B)/: Pairs, tuples, records
  - /Coproduct (A + B)/: Sum types, unions, variants, enums
  - /Implementation/: =(A, B)= in ML, =Pair<A,B>= in Java, =Either<A,B>= in Haskell

- /Functors in type theory/:
  - /Type constructor F/: Maps types to types
  - /fmap/: Maps functions A → B to functions F(A) → F(B)
  - /Laws/: Identity preservation and composition preservation
  - /Examples/: List, Option/Maybe, Result/Either

- /Natural transformations in types/:
  - /Polymorphic functions/: α : ∀X. F(X) → G(X)
  - /Naturality condition/: fmap_G(f) ∘ α_A = α_B ∘ fmap_F(f)
  - /Examples/: =reverse : ∀X. List(X) → List(X)=, =flatten : ∀X. Option(Option(X)) → Option(X)=

*** 1.3 Advanced Typed Systems

- /Dependent types/: Types that depend on values
  - /Pi types (Π)/: Dependent function types
  - /Sigma types (Σ)/: Dependent pair types
  - /Inductive families/: Type families indexed by values
  - /Examples/: Agda, Coq, Idris, Lean

- /Higher-order type theory/: Type systems with type operators
  - /Kind/: Type of a type constructor
  - /Higher-kinded types/: Type constructors that take type constructors as arguments
  - /Type-level functions/: Functions operating on types rather than values

- /Linear types/: Types that control resource usage
  - /Linear logic/: Logic of resources that cannot be duplicated or discarded
  - /Uniqueness typing/: Ensures unique access to objects
  - /Affine types/: Resources that can be discarded but not duplicated
  - /Examples/: Rust's ownership system, Linear Haskell

- /Effect systems/: Type systems tracking computational effects
  - /Effect annotations/: Type-level information about side effects
  - /Effect polymorphism/: Abstraction over effects
  - /Algebraic effects/: Compositional approach to effects
  - /Examples/: Koka, Eff, portions of Haskell with mtl

*** 1.4 Category Theory and Type Theory Connections

- /Curry-Howard-Lambek correspondence/: Three-way isomorphism
  - /Logic ↔ Types/: Propositions as types, proofs as programs
  - /Types ↔ Categories/: Types as objects, functions as morphisms
  - /Logic ↔ Categories/: Propositions as objects, proofs as morphisms
  - /Examples/: A → B as implication, A × B as conjunction, A + B as disjunction

- /Categorical semantics/: Interpreting type systems in categories
  - /Functorial semantics/: Types as functors
  - /Adjunctions/: Modeling pairs of type constructors with special relationships
  - /Monads and comonads/: Capturing computational effects and context-dependence

- /Propositions as types/: Interpretation of logic in type theory
  - /Implication as function type/: P → Q
  - /Conjunction as product type/: P × Q
  - /Disjunction as sum type/: P + Q
  - /Universal quantification/: ∀X. P(X)
  - /Existential quantification/: ∃X. P(X)

- /Homotopy Type Theory (HoTT)/: Extending type theory with homotopical concepts
  - /Identity types/: Types representing equality between terms
  - /Higher inductive types/: Types with path constructors
  - /Univalence axiom/: Isomorphic types are equal
  - /∞-groupoids/: Model of type theory with higher-dimensional structure

** 2. Historical Context and Development

*** 2.1 Early Foundations

- /1900s/: Foundations of mathematics crisis leads to type theory
- /1902/: Russell's paradox demonstrates the need for types
- /1908/: Russell and Whitehead develop ramified theory of types
- /1932-1933/: Church develops lambda calculus
- /1940/: Simply typed lambda calculus introduced by Church
- /1958/: First implementation of LISP with dynamic types

*** 2.2 Development of Modern Type Theory

- /1965-1969/: de Bruijn and Automath project pioneer formal verification
- /1971/: Martin-Löf begins work on intuitionistic type theory
- /1972/: Milner develops ML language with polymorphic type inference
- /1974/: Reynolds introduces System F (polymorphic lambda calculus)
- /1972-1974/: Lambek connects lambda calculus to cartesian closed categories
- /1975/: Martin-Löf's constructive type theory published
- /1980/: Curry-Howard correspondence extended to include classical logic
- /1985-1988/: Calculus of Constructions developed by Coquand and Huet

*** 2.3 Modern Developments

- /1990/: Haskell 1.0 released with strong static typing and type classes
- /1991-1995/: Coq proof assistant based on Calculus of Inductive Constructions
- /1999/: Dependent ML extends ML with limited dependent types
- /2007/: Agda 2 released with dependent types and universe polymorphism
- /2008/: Rust development begins with advanced type system for memory safety
- /2010/: Idris development begins, focusing on practical dependent types
- /2013/: Homotopy Type Theory book published by Univalent Foundations Program
- /2017/: Lean theorem prover gains popularity
- /2020s/: Continued integration of dependent types into mainstream languages

*** 2.4 Relation to GEB and Strange Loops

- /1979/: Hofstadter's "Gödel, Escher, Bach" explores formal systems and self-reference
- /1980s/: Type theoretic interpretations of Gödel's incompleteness theorems
- /1994/: Barendregt's Lambda Cube connects different type systems
- /2007/: Hofstadter's "I Am a Strange Loop" revives interest in self-reference
- /2013/: HoTT provides new perspectives on identity and self-reference
- /2018/: Connections established between reflective towers and higher-order types
- /2020s/: Growing exploration of type-theoretic models of consciousness and self-reference

** 3. Key Players and Their Contributions

*** 3.1 Early Pioneers

- /Bertrand Russell (1872-1970)/
  - Created theory of types to avoid paradoxes
  - Developed logical foundations for mathematics
  - Collaborated with Whitehead on Principia Mathematica

- /Alonzo Church (1903-1995)/
  - Developed lambda calculus
  - Created simply typed lambda calculus
  - Established Church-Turing thesis

- /Haskell Curry (1900-1982)/
  - Discovered combinatory logic
  - Contributed to formalization of programming language semantics
  - Curry-Howard correspondence named partly after him

- /William Howard (1934-)/
  - Formalized Curry-Howard correspondence
  - Connected intuitionistic logic and typed lambda calculus
  - Advanced understanding of proofs as programs

*** 3.2 Type Theory Developers

- /Per Martin-Löf (1942-)/
  - Created intuitionistic type theory
  - Developed constructive foundations for mathematics
  - Pioneered dependent type theory

- /Robin Milner (1934-2010)/
  - Developed ML programming language
  - Created Hindley-Milner type inference algorithm
  - Introduced polymorphic type systems

- /John C. Reynolds (1935-2013)/
  - Formulated polymorphic lambda calculus (System F)
  - Advanced abstraction mechanisms in programming languages
  - Developed separation logic

- /Jean-Yves Girard (1947-)/
  - Created System F (independently of Reynolds)
  - Developed linear logic
  - Advanced proof theory and its connections to type theory

*** 3.3 Categorical Connections

- /Joachim Lambek (1922-2014)/
  - Connected lambda calculus to cartesian closed categories
  - Developed categorical logic
  - Extended Curry-Howard correspondence to include categories

- /F. William Lawvere (1937-)/
  - Developed categorical semantics for algebraic theories
  - Advanced functorial semantics
  - Connected logic and category theory

- /Robert Seely/
  - Formalized relationship between Martin-Löf type theory and locally cartesian closed categories
  - Advanced categorical semantics of dependent types
  - Contributed to logical frameworks

- /Eugenio Moggi/
  - Developed categorical semantics for computation
  - Introduced monads as a way to structure semantics
  - Connected category theory to programming language design

*** 3.4 Modern Contributors

- /Philip Wadler/
  - Popularized type classes
  - Contributed to functional programming languages
  - Advanced practical applications of Curry-Howard correspondence

- /Conor McBride/
  - Advanced dependent type theory
  - Developed programs and proofs using dependent types
  - Contributed to Epigram and Idris

- /Vladimir Voevodsky (1966-2017)/
  - Initiated Univalent Foundations program
  - Connected homotopy theory and type theory
  - Developed HoTT and univalence axiom

- /Robert Harper/
  - Advanced type theory in programming languages
  - Contributed to logical frameworks
  - Connected operational and denotational semantics

** 4. Essential Papers and Reading

*** 4.1 Foundational Papers

1. /"A Formulation of the Simple Theory of Types"/ (1940)
   - /Author/: Alonzo Church
   - /Significance/: Introduced simply typed lambda calculus
   - /Key content/: Type-based approach to lambda calculus

2. /"Propositions as Types"/ (1969, published 1980)
   - /Author/: William Howard
   - /Significance/: Formalized Curry-Howard correspondence
   - /Key content/: Detailed mapping between natural deduction and typed lambda calculus

3. /"Intuitionistic Type Theory"/ (1972)
   - /Author/: Per Martin-Löf
   - /Significance/: Established foundations for constructive mathematics
   - /Key content/: Dependent types, identity types, universes

4. /"Towards a mathematical semantics for computer languages"/ (1971)
   - /Author/: Dana Scott and Christopher Strachey
   - /Significance/: Established denotational semantics
   - /Key content/: Domain theory for programming language semantics

*** 4.2 Category Theory Connections

1. /"Functorial Semantics of Algebraic Theories"/ (1963)
   - /Author/: F. William Lawvere
   - /Significance/: Connected category theory to algebraic theories
   - /Key content/: Functorial approach to semantics

2. /"Coherence in Closed Categories"/ (1970)
   - /Author/: Gregory Kelly and Saunders Mac Lane
   - /Significance/: Advanced understanding of closed categories
   - /Key content/: Coherence theorems for cartesian closed categories

3. /"Categorical Logic and Type Theory"/ (1984)
   - /Author/: Bart Jacobs
   - /Significance/: Comprehensive connection of logic, types, and categories
   - /Key content/: Categorical semantics of dependent types

4. /"Notions of computation and monads"/ (1991)
   - /Author/: Eugenio Moggi
   - /Significance/: Connected monads to computational effects
   - /Key content/: Categorical semantics of effects

*** 4.3 Modern Type Theory Papers

1. /"Dependent Types in Programming"/ (1999)
   - /Author/: Hongwei Xi and Frank Pfenning
   - /Significance/: Brought dependent types to practical programming
   - /Key content/: Applications of dependent types for program correctness

2. /"The View from the Left"/ (2004)
   - /Authors/: Conor McBride and James McKinna
   - /Significance/: Advanced pattern matching in dependent type theory
   - /Key content/: Techniques for programming with dependent types

3. /"The Univalence Axiom in Homotopy Type Theory"/ (2010)
   - /Author/: Vladimir Voevodsky
   - /Significance/: Introduced univalence axiom
   - /Key content/: Homotopical interpretation of type theory

4. /"Computational Higher-Dimensional Type Theory"/ (2016)
   - /Authors/: Angiuli, Harper, Wilson
   - /Significance/: Computational interpretation of HoTT
   - /Key content/: Cubical type theory, computation with higher inductive types

*** 4.4 Books and Comprehensive References

1. /"Types and Programming Languages"/ (2002)
   - /Author/: Benjamin C. Pierce
   - /Significance/: Standard textbook on type systems
   - /Key content/: Comprehensive coverage of type theory for programming languages

2. /"Practical Foundations for Programming Languages"/ (2012)
   - /Author/: Robert Harper
   - /Significance/: Modern approach to programming language theory
   - /Key content/: Type systems, modules, phase distinction

3. /"Homotopy Type Theory: Univalent Foundations of Mathematics"/ (2013)
   - /Authors/: Univalent Foundations Program
   - /Significance/: Landmark book on HoTT
   - /Key content/: Univalence, higher inductive types, synthetic homotopy theory

4. /"Category Theory for Programmers"/ (2018)
   - /Author/: Bartosz Milewski
   - /Significance/: Accessible introduction for programmers
   - /Key content/: Categories, functors, monads with programming examples

5. /"Programming in Martin-Löf's Type Theory"/ (1990)
   - /Authors/: Bengt Nordström, Kent Petersson, Jan M. Smith
   - /Significance/: Early practical guide to dependent types
   - /Key content/: Introduction to type theory with examples

*** 4.5 GEB and Strange Loop Related

1. /"Gödel's Theorem and the Human Mind"/ (1997)
   - /Author/: John R. Lucas
   - /Significance/: Philosophical discussion of Gödel's work
   - /Key content/: Self-reference, consciousness, and formal systems

2. /"A Self-Interpreter for F-omega"/ (2010)
   - /Author/: Matt Brown and Jens Palsberg
   - /Significance/: Connects self-reference to advanced type systems
   - /Key content/: Self-interpreting strongly typed languages

3. /"Type Theory and Formal Proof: An Introduction"/ (2014)
   - /Authors/: Rob Nederpelt and Herman Geuvers
   - /Significance/: Connects type theory to logical foundations
   - /Key content/: Lambda calculus, Curry-Howard, logical frameworks

4. /"Formal Languages in Logic"/ (2012)
   - /Author/: Catarina Dutilh Novaes
   - /Significance/: Philosophical perspective on formal systems
   - /Key content/: Self-reference, paradoxes, and formal languages

** 5. Practical Applications and Examples

*** 5.1 Type Systems in Programming Languages

- /Hindley-Milner type inference in ML/Scheme/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Simple type inference example
  (define (infer-type expr env)
    (match expr
      [(? number?) 'number]
      [(? boolean?) 'boolean]
      [(? symbol?) (lookup-type expr env)]
      [`(lambda (,x) ,body)
       (let ([type-var (make-type-var)]
             [new-env (extend-env env x type-var)])
         `(-> ,type-var ,(infer-type body new-env)))]
      [`(,fun ,arg)
       (let ([fun-type (infer-type fun env)]
             [arg-type (infer-type arg env)])
         (match fun-type
           [`(-> ,param-type ,result-type)
            (if (can-unify? param-type arg-type)
                result-type
                (error "Type mismatch"))]
           [_ (error "Non-function in application position")]))]))
  #+end_src

- /Dependent types example/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Simplified dependent type checking
  (define-record-type <dependent-type>
    (make-dep-type kind expr)
    dep-type?
    (kind dep-type-kind)
    (expr dep-type-expr))
  
  ;; Vec type: Vector of specific length
  (define (vec-type elem-type length)
    (make-dep-type 'vec (list elem-type length)))
  
  ;; Type checking vec-cons operation
  (define (check-vec-cons elem vec)
    (let ([elem-type (infer-type elem)]
          [vec-type (infer-type vec)])
      (match vec-type
        [(? dep-type? t)
         (if (eq? (dep-type-kind t) 'vec)
             (let ([stored-type (car (dep-type-expr t))]
                   [length (cadr (dep-type-expr t))])
               (if (can-unify? elem-type stored-type)
                   (vec-type stored-type (+ length 1))
                   (error "Element type mismatch")))
             (error "Not a vector type"))]
        [_ (error "Not a vector")])))
  #+end_src

- /GADTs in Typed Scheme/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Generalized Algebraic Data Types example
  ;; Represents expressions with type safety
  (define-type Expr
    (U (Struct 'Lit Integer)                  ; Lit : Integer -> Expr Integer
       (Struct 'Add (Expr Integer) (Expr Integer))  ; Add : Expr Integer -> Expr Integer -> Expr Integer
       (Struct 'Eq (Expr Integer) (Expr Integer))   ; Eq : Expr Integer -> Expr Integer -> Expr Boolean
       (Struct 'If (Expr Boolean) (All (a) (Expr a)) (All (a) (Expr a))))) ; If : Expr Boolean -> Expr a -> Expr a -> Expr a
  
  ;; Type-safe evaluation function
  (: eval : (All (a) (Expr a) -> a))
  (define (eval expr)
    (match expr
      [(struct Lit (n)) n]
      [(struct Add (e1 e2)) (+ (eval e1) (eval e2))]
      [(struct Eq (e1 e2)) (= (eval e1) (eval e2))]
      [(struct If (cond then else)) (if (eval cond) (eval then) (eval else))]))
  #+end_src

- /Linear types for resource management/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Linear types simulation
  (define-record-type <linear>
    (make-linear value consumed)
    linear?
    (value linear-value)
    (consumed linear-consumed)
    (consumed-set! linear-consumed-set!))
  
  ;; Linear function example (consumes its argument)
  (define (linear-consume resource)
    (if (linear-consumed resource)
        (error "Resource already consumed")
        (begin
          (linear-consumed-set! resource #t)
          (linear-value resource))))
  
  ;; Example usage with file handles
  (define (with-file filename proc)
    (let ([file (make-linear (open-input-file filename) #f)])
      (dynamic-wind
        (lambda () #f)
        (lambda () (proc file))
        (lambda () 
          (when (not (linear-consumed file))
            (close-input-port (linear-value file))
            (linear-consumed-set! file #t))))))
  #+end_src

*** 5.2 Category Theory in Type Systems

- /Functors in Scheme/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; List functor
  (define (list-map f lst)
    (map f lst))
  
  ;; Maybe functor
  (define-record-type <maybe>
    (make-maybe value)
    maybe?
    (value maybe-value))
  
  (define nothing 'nothing)
  
  (define (just x)
    (make-maybe x))
  
  (define (maybe-map f maybe-val)
    (if (eq? maybe-val nothing)
        nothing
        (just (f (maybe-value maybe-val)))))
  
  ;; Demonstrating functor laws
  (define (test-functor-laws)
    (let ([test-list '(1 2 3)]
          [test-maybe (just 42)]
          [id (lambda (x) x)]
          [f (lambda (x) (+ x 1))]
          [g (lambda (x) (* x 2))])
      ;; Identity law: map id = id
      (and (equal? (list-map id test-list) test-list)
           (or (and (eq? test-maybe nothing) 
                    (eq? (maybe-map id test-maybe) nothing))
               (equal? (maybe-value (maybe-map id test-maybe)) 
                       (maybe-value test-maybe)))
           ;; Composition law: map (g . f) = (map g) . (map f)
           (equal? (list-map (lambda (x) (g (f x))) test-list)
                   (list-map g (list-map f test-list)))
           (or (and (eq? test-maybe nothing)
                    (eq? (maybe-map (lambda (x) (g (f x))) test-maybe)
                         (maybe-map g (maybe-map f test-maybe))))
               (equal? (maybe-value (maybe-map (lambda (x) (g (f x))) test-maybe))
                       (maybe-value (maybe-map g (maybe-map f test-maybe))))))))
  #+end_src

- /Natural transformations between functors/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Natural transformation from List to Maybe (safe-head)
  (define (safe-head lst)
    (if (null? lst)
        nothing
        (just (car lst))))
  
  ;; Natural transformation from Maybe to List
  (define (maybe-to-list maybe-val)
    (if (eq? maybe-val nothing)
        '()
        (list (maybe-value maybe-val))))
  
  ;; Testing naturality
  (define (test-naturality)
    (let ([test-list '(1 2 3)]
          [f (lambda (x) (* x 2))])
      ;; Naturality condition for safe-head:
      ;; safe-head . map f = fmap f . safe-head
      (equal? (safe-head (list-map f test-list))
              (maybe-map f (safe-head test-list)))))
  #+end_src

- /Products and coproducts in types/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Product type
  (define-record-type <pair>
    (make-pair first second)
    pair?
    (first pair-first)
    (second pair-second))
  
  ;; Product operations
  (define (pair-map f g p)
    (make-pair (f (pair-first p))
               (g (pair-second p))))
  
  ;; Coproduct type (Either)
  (define-record-type <either>
    (make-either tag value)
    either?
    (tag either-tag)
    (value either-value))
  
  (define (left x)
    (make-either 'left x))
  
  (define (right x)
    (make-either 'right x))
  
  ;; Coproduct operations
  (define (either-map f g e)
    (case (either-tag e)
      [(left) (left (f (either-value e)))]
      [(right) (right (g (either-value e)))]))
  #+end_src

- /Monads and categories/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Monad operations for Maybe
  (define (maybe-return x)
    (just x))
  
  (define (maybe-bind maybe-val f)
    (if (eq? maybe-val nothing)
        nothing
        (f (maybe-value maybe-val))))
  
  ;; Kleisli composition for Maybe
  (define (kleisli-compose f g)
    (lambda (x)
      (maybe-bind (f x) g)))
  
  ;; Testing monad laws
  (define (test-monad-laws)
    (let ([x 42]
          [f (lambda (n) (just (+ n 1)))]
          [g (lambda (n) (just (* n 2)))])
      ;; Left identity: return a >>= f = f a
      (equal? (maybe-bind (maybe-return x) f)
              (f x))
      ;; Right identity: m >>= return = m
      (equal? (maybe-bind (just x) maybe-return)
              (just x))
      ;; Associativity: (m >>= f) >>= g = m >>= (\x -> f x >>= g)
      (equal? (maybe-bind (maybe-bind (just x) f) g)
              (maybe-bind (just x) (lambda (y) (maybe-bind (f y) g))))))
  #+end_src

*** 5.3 Curry-Howard Correspondence Examples

- /Propositions as types/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Logic connectives as types
  
  ;; Conjunction (AND) as product type
  (define-record-type <and-proof>
    (make-and-proof left right)
    and-proof?
    (left and-proof-left)
    (right and-proof-right))
  
  ;; Disjunction (OR) as sum type
  (define-record-type <or-proof>
    (make-or-proof tag value)
    or-proof?
    (tag or-proof-tag)
    (value or-proof-value))
  
  (define (or-left x)
    (make-or-proof 'left x))
  
  (define (or-right x)
    (make-or-proof 'right x))
  
  ;; Implication (→) as function type
  (define (implication-proof p q)
    (lambda (proof-of-p) (q proof-of-p)))
  
  ;; Universal quantification (∀) as polymorphic function
  (define (forall-proof p)
    (lambda (type) (p type)))
  
  ;; Existential quantification (∃) as dependent pair
  (define-record-type <exists-proof>
    (make-exists-proof witness proof)
    exists-proof?
    (witness exists-proof-witness)
    (proof exists-proof-proof))
  #+end_src

- /Proofs as programs example/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Proving A → (B → A)
  ;; In logic: A implies (B implies A)
  ;; In types: A → (B → A)
  (define (proof-k a)
    (lambda (b) a))
  
  ;; Proving (A → (B → C)) → ((A → B) → (A → C))
  ;; This is the S combinator in SKI calculus
  (define (proof-s f)
    (lambda (g)
      (lambda (a)
        ((f a) (g a)))))
  
  ;; Proving ((A → B) → A) → A
  ;; This is Peirce's law in classical logic
  ;; Not provable in constructive logic!
  ;; In types: We need continuations or other classical features
  (define (proof-peirce-with-callcc p)
    (call/cc
     (lambda (k)
       (p (lambda (a) (k a))))))
  #+end_src

- /Logic connectives and type operations/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; De Morgan's laws as type isomorphisms
  
  ;; not(A and B) ≅ not(A) or not(B)
  (define (demorgan1-to f)
    (match f
      [(lambda (p) (error "Contradiction"))
       (if (and-proof? p)
           (let ([a (and-proof-left p)]
                 [b (and-proof-right p)])
             ;; Either not(A) or not(B)
             (try
              (or-left (lambda () (f (make-and-proof a b))))
              (or-right (lambda () (f (make-and-proof a b))))))
           (error "Not an and-proof"))]))
  
  (define (demorgan1-from or-not)
    (lambda (p)
      (match or-not
        [(? or-proof? o)
         (case (or-proof-tag o)
           [(left) ((or-proof-value o) (and-proof-left p))]
           [(right) ((or-proof-value o) (and-proof-right p))])]
        [_ (error "Not an or-proof")])))
  #+end_src

*** 5.4 GEB and Strange Loop Examples

- /Self-referential types/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Recursively defined types
  (define-record-type <mu>
    (make-mu unroll)
    mu?
    (unroll mu-unroll))
  
  ;; List type as fixed point
  (define-record-type <list-f>
    (make-list-f tag value)
    list-f?
    (tag list-f-tag)
    (value list-f-value))
  
  (define (nil)
    (make-mu (make-list-f 'nil '())))
  
  (define (cons head tail)
    (make-mu (make-list-f 'cons (cons head tail))))
  
  ;; Extract values from our recursive list
  (define (list-case l nil-case cons-case)
    (let ([unrolled (mu-unroll l)])
      (case (list-f-tag unrolled)
        [(nil) (nil-case)]
        [(cons) (let ([pair (list-f-value unrolled)])
                  (cons-case (car pair) (cdr pair)))])))
  #+end_src

- /Type-level fixed points/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Type-level fixed point operator
  (define (fix-type f)
    (lambda (x) ((f (fix-type f)) x)))
  
  ;; List type as fixed point of a functor
  (define list-type
    (fix-type
     (lambda (rec)
       (lambda (elem-type)
         `(either unit (pair ,elem-type ,rec))))))
  
  ;; Tree type as fixed point of a functor
  (define tree-type
    (fix-type
     (lambda (rec)
       (lambda (elem-type)
         `(either ,elem-type (pair ,rec ,rec))))))
  #+end_src

- /Typeful quines/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; A simplified typeful quine
  ;; This is a rough approximation as true typeful quines
  ;; require more sophisticated type systems
  (define (typed-quine)
    (let* ([code '(lambda (x) 
                    (let ([code x]) 
                      (list code code)))]
           [program (eval code)])
      (program code)))
  
  ;; More explicit typing (pseudo-code)
  #|
  type Quine a = (Quine a -> a) -> a
  
  quine : Quine (Quine a)
  quine = λself. self self
  |#
  #+end_src

- /Type theory interpretation of Gödel's theorem/:
  #+begin_src scheme :tangle ../src/generated/type-theory.scm :mkdirp yes :noweb yes :results output :exports both 
  ;; Pseudo-implementation of Gödel numbering for types
  (define (type->number type)
    (match type
      ['unit 0]
      [(list 'pair t1 t2) (+ (* 3 (type->number t1))
                             (* 5 (type->number t2)))]
      [(list 'arrow t1 t2) (+ (* 7 (type->number t1))
                              (* 11 (type->number t2)))]
      [(list 'forall var body) (+ (* 13 (symbol->number var))
                                  (* 17 (type->number body)))]))
  
  ;; Pseudo-implementation of self-reference at type level
  (define (make-self-referential type-function)
    (let* ([type-code (type->number type-function)]
           [type-with-hole (insert-type-code-hole type-function)]
           [self-ref-type (insert-code type-with-hole type-code)])
      self-ref-type))
  #+end_src

** 6. Interview-Ready Examples and Insights

*** 6.1 Key Insights to Demonstrate Expertise

- "The Curry-Howard correspondence reveals that types are inherently logical propositions, which means every well-typed program is simultaneously a mathematical proof of its type specification."

- "Category theory provides a unifying language for type systems across different programming paradigms, revealing that concepts like functors, monads, and natural transformations aren't just theoretical—they're practical design patterns."

- "Dependent types represent the frontier where programming meets mathematical proof, allowing us to express properties like 'this function returns a list of exactly the same length as its input' directly in the type system."

- "The connection between cartesian closed categories and simply typed lambda calculus shows that function application and composition aren't arbitrary design choices—they reflect deep mathematical structure."

- "Type inference is a form of automated logical deduction, which is why languages with expressive type systems can often deduce types without explicit annotations, much like a mathematician can derive conclusions from premises."

*** 6.2 Connecting to GEB and Strange Loops

- "Gödel's incompleteness theorems can be expressed in type theory: any sufficiently expressive type system must contain either untypable expressions or admit nonsensical types—a perfect strange loop."

- "Self-referential types in programming languages mirror the self-reference that Hofstadter explores in GEB, particularly when we implement recursive types as fixed points of functors."

- "The 'I am a strange loop' concept from Hofstadter finds its formal expression in reflective type systems, where a program can analyze and manipulate its own type structure during execution."

- "Quines—self-reproducing programs—can be typed in sufficiently advanced type systems, providing a concrete implementation of the kind of self-reference central to GEB's exploration of consciousness."

- "Hofstadter's 'tangled hierarchies' manifest in programming language type systems when we have higher-order polymorphism, allowing types to be passed as parameters to other types, creating a hierarchy that folds back on itself."

*** 6.3 Demonstrating Technical Depth

- "When designing a typed API for a complex system, I prefer to express invariants through the type system rather than runtime checks, effectively shifting what would be runtime errors to compile-time errors through the propositions-as-types correspondence."

- "The limitation of Hindley-Milner type inference to rank-1 polymorphism represents a practical trade-off between expressiveness and decidability, which is why languages like Haskell and ML need explicit type annotations for higher-rank types."

- "GADTs (Generalized Algebraic Data Types) provide a way to carry type information at runtime, allowing for more precise type refinement based on pattern matching, which is particularly valuable for implementing type-safe interpreters."

- "Linear types offer a compile-time solution to resource management problems by tracking whether a value is used exactly once, which is the theoretical foundation for Rust's ownership system."

- "Higher-kinded types allow us to abstract over type constructors rather than just types, which enables powerful generic programming patterns like type classes for functors, applicatives, and monads."

*** 6.4 Practical Applications Summary

- "In distributed systems, session types provide a type-theoretic foundation for ensuring protocol conformance, guaranteeing that communicating processes follow a predefined interaction pattern."

- "Dependent types allow for expressing precise specifications in the type system, enabling formally verified software where correctness properties are checked by the compiler rather than through testing."

- "Effect systems extend type systems to track computational effects, allowing the compiler to enforce rules like 'this pure function cannot perform I/O' or 'this code cannot access the network.'"

- "Refinement types enhance basic types with logical predicates, enabling specifications like 'integers greater than zero' or 'arrays indexed within bounds' that can be verified at compile time."

- "The Curry-Howard-Lambek correspondence connects type theory, category theory, and logic in a way that directly informs programming language design, proof assistants, and verified compilation."
