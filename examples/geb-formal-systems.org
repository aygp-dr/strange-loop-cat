#+TITLE: Formal Systems from Gödel, Escher, Bach
#+AUTHOR: Jason Walsh
#+EMAIL: jwalsh@defrecord.com
#+DATE: 2025-05-15
#+PROPERTY: header-args:scheme :results output :exports both :eval yes :noweb yes :tangle yes
#+PROPERTY: header-args:guile :results output :exports both :eval yes :noweb yes :tangle yes
#+PROPERTY: header-args:mermaid :file ../images/diagrams/:results file :exports both
#+OPTIONS: toc:3 num:3 
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

# Tangle destination for Scheme code
#+PROPERTY: tangle-dir "../src/generated/"

* Introduction

This file contains implementations of formal systems and concepts from Douglas Hofstadter's
"Gödel, Escher, Bach: An Eternal Golden Braid" (GEB). The implementations serve as 
concrete examples of the abstract concepts discussed in the book and provide a computational
perspective on self-reference, strange loops, and formal systems.

** Loading Required Modules

#+NAME: module-loading
#+begin_src scheme :tangle ../src/generated/geb-systems.scm :mkdirp yes
(use-modules (ice-9 format)
             (srfi srfi-1)
             (srfi srfi-9)
             (srfi srfi-43)
             (ice-9 match)
             (ice-9 pretty-print))

(display "Modules loaded successfully.\n")
#+end_src

* The MIU Formal System

The MIU system from Chapter I is a formal system with strings built from the symbols M, I, and U,
starting with the axiom MI. It has four rules of inference:

1. If you have a string ending with I, you can add U (xI → xIU)
2. If you have a string starting with M, you can double everything after M (Mx → Mxx)
3. If you have III in your string, you can replace it with U (xIIIy → xUy)
4. If you have UU in your string, you can remove it (xUUy → xy)

The question posed by Hofstadter: Can you derive MU from MI using these rules?

#+NAME: miu-system
#+begin_src scheme :tangle ../src/generated/miu-system.scm :mkdirp yes
;; MIU formal system from GEB
(define (miu-rule1 str)
  (if (string=? (string-take-right str 1) "I")
      (string-append str "U")
      str))

(define (miu-rule2 str)
  (if (string=? (string-take str 1) "M")
      (string-append "M" (string-append str (substring str 1)))
      str))

(define (miu-rule3 str)
  (let* ((pattern "III")
         (idx (string-contains str pattern)))
    (if idx
        (string-append (substring str 0 idx) 
                       "U" 
                       (substring str (+ idx (string-length pattern))))
        str)))

(define (miu-rule4 str)
  (let* ((pattern "UU")
         (idx (string-contains str pattern)))
    (if idx
        (string-append (substring str 0 idx) 
                       (substring str (+ idx (string-length pattern))))
        str)))

;; Check if a string is a valid MIU string
(define (valid-miu? str)
  (and (> (string-length str) 0)
       (string=? (string-take str 1) "M")
       (string-every (lambda (c) (member c '(#\M #\I #\U))) str)))

;; Generate all possible MIU strings up to a certain level
(define (generate-miu-strings start max-depth)
  (define seen (make-hash-table))
  (define (explore str depth)
    (if (or (>= depth max-depth) (hash-ref seen str))
        '()
        (begin
          (hash-set! seen str #t)
          (cons str
                (append (explore (miu-rule1 str) (+ depth 1))
                        (explore (miu-rule2 str) (+ depth 1))
                        (explore (miu-rule3 str) (+ depth 1))
                        (explore (miu-rule4 str) (+ depth 1)))))))
  (explore start 0))

;; GEB-style demonstration
(define miu-strings (generate-miu-strings "MI" 4))
(format #t "MIU strings: ~a\n" miu-strings)
(format #t "Is MU derivable? ~a\n" 
        (member "MU" miu-strings))
#+end_src

* Typographical Number Theory (TNT)

TNT is a formal system for expressing elementary number theory, introduced in GEB to demonstrate
Gödel's Incompleteness Theorem. It includes variables, constants, operators, and logical symbols.

#+NAME: tnt-system
#+begin_src scheme :tangle ../src/generated/tnt-system.scm :mkdirp yes
;; TNT symbols and operations
(define-record-type <tnt-term>
  (make-tnt-term type value args)
  tnt-term?
  (type tnt-term-type)
  (value tnt-term-value)
  (args tnt-term-args))

;; TNT Term constructors
(define (tnt-variable name) 
  (make-tnt-term 'variable name '()))

(define (tnt-constant n) 
  (make-tnt-term 'constant n '()))

(define (tnt-successor term)
  (make-tnt-term 'successor 'S (list term)))

(define (tnt-plus a b)
  (make-tnt-term 'plus '+ (list a b)))

(define (tnt-times a b)
  (make-tnt-term 'times '* (list a b)))

;; TNT Formula constructors
(define (tnt-equals a b)
  (make-tnt-term 'equals '= (list a b)))

(define (tnt-not p)
  (make-tnt-term 'not '~ (list p)))

(define (tnt-and p q)
  (make-tnt-term 'and '^ (list p q)))

(define (tnt-or p q)
  (make-tnt-term 'or 'v (list p q)))

(define (tnt-implies p q)
  (make-tnt-term 'implies '⊃ (list p q)))

(define (tnt-forall var p)
  (make-tnt-term 'forall '∀ (list var p)))

(define (tnt-exists var p)
  (make-tnt-term 'exists '∃ (list var p)))

;; String representation of TNT terms
(define (tnt->string term)
  (case (tnt-term-type term)
    ((variable) (tnt-term-value term))
    ((constant) (number->string (tnt-term-value term)))
    ((successor) (string-append "S" (tnt->string (car (tnt-term-args term)))))
    ((plus) (string-append "(" 
                          (tnt->string (car (tnt-term-args term)))
                          "+"
                          (tnt->string (cadr (tnt-term-args term)))
                          ")"))
    ((times) (string-append "(" 
                           (tnt->string (car (tnt-term-args term)))
                           "·"
                           (tnt->string (cadr (tnt-term-args term)))
                           ")"))
    ((equals) (string-append (tnt->string (car (tnt-term-args term)))
                            "="
                            (tnt->string (cadr (tnt-term-args term)))))
    ((not) (string-append "~" (tnt->string (car (tnt-term-args term)))))
    ((and) (string-append "(" 
                         (tnt->string (car (tnt-term-args term)))
                         "^"
                         (tnt->string (cadr (tnt-term-args term)))
                         ")"))
    ((or) (string-append "(" 
                        (tnt->string (car (tnt-term-args term)))
                        "v"
                        (tnt->string (cadr (tnt-term-args term)))
                        ")"))
    ((implies) (string-append "(" 
                             (tnt->string (car (tnt-term-args term)))
                             "⊃"
                             (tnt->string (cadr (tnt-term-args term)))
                             ")"))
    ((forall) (string-append "∀" 
                            (tnt->string (car (tnt-term-args term)))
                            ":" 
                            (tnt->string (cadr (tnt-term-args term)))))
    ((exists) (string-append "∃" 
                            (tnt->string (car (tnt-term-args term)))
                            ":" 
                            (tnt->string (cadr (tnt-term-args term)))))))

;; Example: Creating and displaying a TNT formula
(define zero (tnt-constant 0))
(define a (tnt-variable "a"))
(define statement 
  (tnt-forall a (tnt-not (tnt-equals (tnt-plus a zero) zero))))

(format #t "TNT statement: ~a\n" (tnt->string statement))
#+end_src

* Self-Reference and Gödel Numbering

Gödel's breakthrough was encoding statements about formal systems within the systems themselves.
This section implements Gödel numbering and demonstrates how a system can talk about itself.

#+NAME: godel-numbering
#+begin_src scheme :tangle ../src/generated/godel-numbering.scm :mkdirp yes
;; Create Gödel numbering for TNT
(define (tnt-godel-encode term)
  (define symbol-codes
    '((S . 1) (0 . 3) (= . 5) (+ . 7) (· . 9)
      (~ . 11) (v . 13) (^ . 15) (⊃ . 17) (∀ . 19) (∃ . 21)
      (a . 23) (b . 25) (c . 27) (d . 29) (e . 31)))
  
  (define (encode-symbol sym)
    (let ((code (assoc sym symbol-codes)))
      (if code (cdr code) 
          (if (number? sym) (* 2 sym) 101))))
  
  (define (encode-term t)
    (case (tnt-term-type t)
      ((variable) (encode-symbol (tnt-term-value t)))
      ((constant) (encode-symbol (tnt-term-value t)))
      (else (let ((code (encode-symbol (tnt-term-value t)))
                  (args-encoded (map encode-term (tnt-term-args t))))
              (apply + (* code (expt 2 (length args-encoded)))
                     args-encoded)))))
  
  (encode-term term))

;; Create a self-referential TNT statement (Gödel-like)
(define (create-godel-statement)
  (let* ((var-a (tnt-variable "a"))
         ;; Statement pattern: "This statement is not provable"
         (self-ref (tnt-not 
                    (tnt-exists var-a
                               (tnt-equals var-a 
                                          (tnt-constant 
                                           (tnt-godel-encode 'placeholder)))))))
    ;; Calculate the actual Gödel number
    (let ((godel-num (tnt-godel-encode self-ref)))
      ;; Update the placeholder with the actual Gödel number
      (tnt-not 
       (tnt-exists var-a
                  (tnt-equals var-a 
                             (tnt-constant godel-num)))))))

;; Demonstrate the Gödel statement
(define g-statement (create-godel-statement))
(format #t "Gödel statement: ~a\n" (tnt->string g-statement))
(format #t "Gödel number: ~a\n" (tnt-godel-encode g-statement))
#+end_src

* Hofstadter's Sequences

GEB introduces several self-referential sequences that exhibit fascinating properties:

** The Q-Sequence

#+NAME: hofstadter-q
#+begin_src scheme :tangle ../src/generated/hofstadter-q.scm :mkdirp yes
;; Hofstadter's Q-sequence: Q(n) = Q(n-Q(n-1)) + Q(n-Q(n-2)) for n>2
(define (hofstadter-q n)
  (if (<= n 2)
      1
      (+ (hofstadter-q (- n (hofstadter-q (- n 1))))
         (hofstadter-q (- n (hofstadter-q (- n 2)))))))

;; Optimize with memoization for practical computation
(define hofstadter-q-memo
  (let ((memo (make-hash-table)))
    (lambda (n)
      (or (hash-ref memo n)
          (let ((result
                 (if (<= n 2)
                     1
                     (+ (hofstadter-q-memo (- n (hofstadter-q-memo (- n 1))))
                        (hofstadter-q-memo (- n (hofstadter-q-memo (- n 2)))))))
            (hash-set! memo n result)
            result)))))

;; Generate sequence terms
(define (q-sequence n)
  (map hofstadter-q-memo (iota n 1)))

(format #t "First 20 terms of Hofstadter's Q-sequence:\n~a\n" 
        (q-sequence 20))
#+end_src

** The G-Sequence

#+NAME: hofstadter-g
#+begin_src scheme :tangle ../src/generated/hofstadter-g.scm :mkdirp yes
;; Hofstadter's G-sequence: G(n) = n - G(G(n-1))
(define g-memo (make-hash-table))

(define (hofstadter-g n)
  (if (= n 0)
      0
      (or (hash-ref g-memo n)
          (let ((result (- n (hofstadter-g (hofstadter-g (- n 1))))))
            (hash-set! g-memo n result)
            result))))

;; Generate sequence terms
(define (g-sequence n)
  (map hofstadter-g (iota n)))

(format #t "First 20 terms of Hofstadter's G-sequence:\n~a\n" 
        (g-sequence 20))
#+end_src

** The H-Sequence

#+NAME: hofstadter-h
#+begin_src scheme :tangle ../src/generated/hofstadter-h.scm :mkdirp yes
;; Hofstadter's H-sequence: H(n) = n - H(H(H(n-1)))
(define h-memo (make-hash-table))

(define (hofstadter-h n)
  (if (= n 0)
      0
      (or (hash-ref h-memo n)
          (let ((result (- n (hofstadter-h (hofstadter-h (hofstadter-h (- n 1)))))))
            (hash-set! h-memo n result)
            result))))

;; Generate sequence terms
(define (h-sequence n)
  (map hofstadter-h (iota n)))

(format #t "First 20 terms of Hofstadter's H-sequence:\n~a\n" 
        (h-sequence 20))
#+end_src

* Dialogues and Meta-Structures

GEB's dialogues between Achilles and the Tortoise illustrate many concepts through conversation.
Here we implement a meta-structure for creating GEB-style dialogues.

#+NAME: geb-dialogues
#+begin_src scheme :tangle ../src/generated/geb-dialogues.scm :mkdirp yes
;; GEB Dialogue structure implemented in Scheme
(define-record-type <character>
  (make-character name personality)
  character?
  (name character-name)
  (personality character-personality))

(define-record-type <dialogue>
  (make-dialogue title characters script)
  dialogue?
  (title dialogue-title)
  (characters dialogue-characters)
  (script dialogue-script))

;; Define the characters
(define achilles
  (make-character 
   "Achilles" 
   "Naive but curious, quick to accept new ideas"))

(define tortoise
  (make-character 
   "Tortoise"
   "Wise, methodical, fond of logical paradoxes"))

;; Create a dialogue about strange loops
(define strange-loop-dialogue
  (make-dialogue
   "Strange Loops and Monomorphisms"
   (list achilles tortoise)
   (list
    (cons achilles "I've been reading about these category theory concepts, but I'm struggling with monomorphisms and epimorphisms.")
    (cons tortoise "Let me explain with a simple example. Consider a record player.")
    (cons achilles "A record player?")
    (cons tortoise "Yes! When you play a vinyl record, the needle traces the grooves and transforms physical patterns into sound waves. This is a monomorphism.")
    (cons achilles "How so?")
    (cons tortoise "Because different groove patterns always produce different sounds. If two records produce exactly the same sound in your player, they must have identical grooves!")
    (cons achilles "I see! And what about epimorphisms?")
    (cons tortoise "Consider the volume knob on that same record player. It maps a continuous rotation to a range of volumes from silent to maximum.")
    (cons achilles "And that's an epimorphism because...?")
    (cons tortoise "Because every possible volume level can be reached by some position of the knob. No matter what volume you want, there's a knob position that gets you there!"))))

;; Display the dialogue in GEB style
(define (display-dialogue dialogue)
  (format #t "~a\n\n" (dialogue-title dialogue))
  (for-each
   (lambda (line)
     (format #t "~a: ~a\n\n" 
             (character-name (car line)) 
             (cdr line)))
   (dialogue-script dialogue)))

(display-dialogue strange-loop-dialogue)
#+end_src

* Canons and Transformations

Bach's music demonstrates transformations that create self-reference and strange loops.
This section implements musical transformations mentioned in GEB.

#+NAME: musical-transformations
#+begin_src scheme :tangle ../src/generated/musical-transformations.scm :mkdirp yes
;; Define musical notes as integers (C=0, C#=1, ... B=11)
(define-record-type <musical-phrase>
  (make-musical-phrase notes durations)
  musical-phrase?
  (notes phrase-notes)
  (durations phrase-durations))

;; Musical transformations from GEB
(define (transpose phrase semitones)
  (make-musical-phrase
   (map (lambda (note) (modulo (+ note semitones) 12))
        (phrase-notes phrase))
   (phrase-durations phrase)))

(define (invert phrase)
  (let ((first-note (car (phrase-notes phrase))))
    (make-musical-phrase
     (map (lambda (note) (modulo (- (* 2 first-note) note) 12))
          (phrase-notes phrase))
     (phrase-durations phrase))))

(define (retrograde phrase)
  (make-musical-phrase
   (reverse (phrase-notes phrase))
   (reverse (phrase-durations phrase))))

(define (augment phrase factor)
  (make-musical-phrase
   (phrase-notes phrase)
   (map (lambda (dur) (* dur factor))
        (phrase-durations phrase))))

(define (canonic-transformation phrase)
  (let* ((transposed (transpose phrase 7))        ;; Up a fifth
         (inverted (invert transposed))          ;; Then invert
         (augmented (augment inverted 2)))       ;; Double the duration
    augmented))

;; Theme from Bach's Musical Offering (simplified)
(define royal-theme
  (make-musical-phrase
   '(0 2 3 5 7 8 7 5 4 0)  ;; C D D# F G G# G F E C
   '(1 1 1 1 1 1 1 1 1 2)))

;; Apply transformations
(define transformed-theme (canonic-transformation royal-theme))

;; Display results in a GEB-inspired format
(define (display-theme phrase)
  (define note-names '#("C" "C#" "D" "D#" "E" "F" "F#" "G" "G#" "A" "A#" "B"))
  (for-each (lambda (note dur)
              (format #t "~a(~a) " 
                      (vector-ref note-names note)
                      dur))
            (phrase-notes phrase)
            (phrase-durations phrase))
  (newline))

(format #t "Original theme: ")
(display-theme royal-theme)
(format #t "Transformed theme: ")
(display-theme transformed-theme)
#+end_src

* Strange Loops Through Self-Modifying Code

This example demonstrates a program that modifies its own definition - a direct parallel to GEB's self-reference.

#+NAME: self-modifying-function
#+begin_src scheme :tangle ../src/generated/self-modifying-function.scm :mkdirp yes
;; Self-modifying function: A strange loop that changes its own definition
(define (make-self-modifying-function)
  (let ((counter 0)
        (implementations
         (list
          (lambda (x) (* x 2))          ;; Initial implementation
          (lambda (x) (+ x 1))          ;; First transformation
          (lambda (x) (expt x 2))       ;; Second transformation
          (lambda (x) (- x 10)))))      ;; Final transformation
    (lambda (x)
      (let ((current-impl (list-ref implementations 
                                    (modulo counter (length implementations))))
            (result '()))
        (set! result (current-impl x))
        (set! counter (+ counter 1)) ;; Evolve for next call
        (format #t "Function evolved to version ~a\n" 
                (modulo counter (length implementations)))
        result))))

;; Create and use a self-modifying function
(define strange-f (make-self-modifying-function))
(format #t "Result 1: ~a\n" (strange-f 5))  ;; Uses x*2
(format #t "Result 2: ~a\n" (strange-f 5))  ;; Uses x+1  
(format #t "Result 3: ~a\n" (strange-f 5))  ;; Uses x^2
(format #t "Result 4: ~a\n" (strange-f 5))  ;; Uses x-10
(format #t "Result 5: ~a\n" (strange-f 5))  ;; Back to x*2
#+end_src

* Quines: The Ultimate Self-Reference

A quine is a program that outputs its own source code - the ultimate strange loop.

#+NAME: quine
#+begin_src scheme :tangle ../src/generated/quine.scm :mkdirp yes
;; A Scheme quine - the quintessential self-referential program
(define quine
  '((lambda (x) 
      (let ((d '(lambda (x) 
                  (let ((d '()))
                    (cons d 
                          (list 
                           (list 'quote d)))))))
        (cons d 
              (list 
               (list 'quote d))))) 
    '(lambda (x) 
       (let ((d '()))
         (cons d 
               (list 
                (list 'quote d)))))))

;; Evaluate and display the quine
(format #t "Quine result:\n~a\n" (eval quine (interaction-environment)))

;; Verify it's a true quine by comparing to original
(format #t "Is it a true quine? ~a\n" 
        (equal? quine (eval quine (interaction-environment))))
#+end_src

* GEB Levels of Meaning

This implements the "levels of meaning" concept from GEB with types.

#+NAME: geb-levels
#+begin_src scheme :tangle ../src/generated/geb-levels.scm :mkdirp yes
;; GEB Levels of Meaning with Type Theory
(define-record-type <geb-level>
  (make-geb-level name description elements operations)
  geb-level?
  (name level-name)
  (description level-description)
  (elements level-elements)
  (operations level-operations))

;; Define the GEB meaning levels
(define level-0 
  (make-geb-level
   "Level 0: Strings"
   "The basic symbols and strings of formal systems"
   '("M" "I" "U" "MI" "MU" "MIU" "MIIU")
   (list
    (cons 'append string-append)
    (cons 'length string-length))))

(define level-1
  (make-geb-level
   "Level 1: Rules"
   "The rules that operate on strings"
   (list miu-rule1 miu-rule2 miu-rule3 miu-rule4)
   (list
    (cons 'apply (lambda (rule string) (rule string)))
    (cons 'compose (lambda (rule1 rule2)
                     (lambda (s) (rule2 (rule1 s))))))))

(define level-2
  (make-geb-level
   "Level 2: Metarules"
   "Rules for generating or selecting rules"
   (list 
    (lambda (rules) 
      (list-ref rules (random (length rules))))
    (lambda (rules)
      (lambda (s)
        ((fold (lambda (rule result)
                (lambda (str) (rule (result str))))
              (lambda (x) x)
              rules)
         s))))
   (list
    (cons 'select car)
    (cons 'combine cadr))))

;; Create Escher-like Strange Loop: levels that reference each other
(define (connect-strange-loop levels)
  (for-each
   (lambda (level-pair)
     (let ((lower (car level-pair))
           (higher (cadr level-pair)))
       ;; Add reference from higher to lower level
       (set! (level-elements higher)
             (cons (level-name lower) (level-elements higher)))
       ;; Add reference from lower to higher level
       (set! (level-operations lower)
             (cons (cons 'ascend 
                         (lambda (x) 
                           (format #t "Rising to ~a\n" (level-name higher))
                           (level-name higher)))
                   (level-operations lower)))))
   (zip levels (append (cdr levels) (list (car levels))))))

;; Create and connect levels
(define geb-levels (list level-0 level-1 level-2))
(connect-strange-loop geb-levels)

;; Demonstrate the strange loop
(define (traverse-geb-levels levels count)
  (let loop ((current-level (car levels))
             (steps 0))
    (format #t "At ~a: ~a\n" 
            (level-name current-level)
            (level-description current-level))
    (if (>= steps count)
        'done
        (let* ((ops (level-operations current-level))
               (ascend-op (cdr (assoc 'ascend ops)))
               (next-level-name (ascend-op 'current))
               (next-level (find (lambda (l) 
                                   (string=? (level-name l) next-level-name))
                                 levels)))
          (loop next-level (+ steps 1))))))

(traverse-geb-levels geb-levels 6)
#+end_src

* Monomorphisms and Epimorphisms

Implementation of monomorphisms and epimorphisms with GEB-style examples:

#+NAME: monomorphisms-epimorphisms
#+begin_src scheme :tangle ../src/generated/monomorphisms-epimorphisms.scm :mkdirp yes
;; GEB-inspired demonstration of monomorphisms and epimorphisms through types
(define-record-type <note>
  (make-note name octave)
  note?
  (name note-name)
  (octave note-octave))

;; Monomorphism: Each distinct note maps to a unique frequency
(define (note->frequency note)
  (let* ((base-a4 440.0)
         (note-values '((C . 0) (D . 2) (E . 4) (F . 5) 
                         (G . 7) (A . 9) (B . 11)))
         (semitones-from-a4 
          (+ (* 12 (- (note-octave note) 4))
             (- (cdr (assoc (note-name note) note-values)) 9))))
    (* base-a4 (expt 2 (/ semitones-from-a4 12)))))

;; Epimorphism: Every century is hit by some year
(define-record-type <album>
  (make-album title artist year)
  album?
  (title album-title)
  (artist album-artist)
  (year album-year))

(define (album->century album)
  (+ 1 (quotient (album-year album) 100)))

;; GEB-style demonstration
(define notes
  (list (make-note 'A 4) 
        (make-note 'C 5)
        (make-note 'E 5)))

(define albums
  (list (make-album "The Goldberg Variations" "Bach" 1741)
        (make-album "The Art of Fugue" "Bach" 1750)
        (make-album "Nocturnes" "Chopin" 1832)
        (make-album "Thus Spoke Zarathustra" "Strauss" 1896)))

;; Demonstrate monomorphism (injective mapping)
(format #t "Monomorphism (Note -> Frequency):\n")
(for-each 
 (lambda (note) 
   (format #t "~a~a: ~a Hz\n" 
           (note-name note) 
           (note-octave note)
           (note->frequency note)))
 notes)

(format #t "\nEach distinct note has a distinct frequency.\n")
(format #t "If f(a) = f(b), then a = b (injective property)\n\n")

;; Demonstrate epimorphism (surjective mapping)
(format #t "Epimorphism (Album -> Century):\n")
(for-each
 (lambda (album)
   (format #t "~a (~a): ~ath century\n"
           (album-title album)
           (album-year album)
           (album->century album)))
 albums)

(format #t "\nEvery relevant century is hit by some album.\n")
(format #t "For every output, there exists an input mapping to it.\n")
#+end_src

* Exercises

1. Extend the MIU system with a new rule and explore its implications.
2. Create a TNT proof of a simple theorem.
3. Implement one of the paradoxes discussed in GEB (e.g., the Epimenides paradox).
4. Design your own formal system inspired by GEB.
5. Implement the different versions of Hofstadter's Strange Loops in code.
6. Create your own Quine with additional functionality.
7. Design a dialogue between Achilles and the Tortoise discussing category theory concepts.
