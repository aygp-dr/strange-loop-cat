#+TITLE: Modular Systems and Symmetry: Fixed Points in Cyclical Structures
#+AUTHOR: Jason Walsh
#+EMAIL: jwalsh@defrecord.com
#+DATE: 2025-05-15
#+PROPERTY: header-args:scheme :results output :exports both :eval yes :noweb yes :tangle yes
#+PROPERTY: header-args:guile :results output :exports both :eval yes :noweb yes :tangle yes
#+PROPERTY: header-args:mermaid :file ../images/diagrams/:results file :exports both
#+OPTIONS: toc:3 num:3 
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

# Tangle destination for Scheme code
#+PROPERTY: tangle-dir "../src/generated/"

* Modular Systems and Strange Loops

Modular systems naturally create cyclical structures where operations can lead back to starting points.
These systems appear across mathematics, music, art, and everyday experience, creating rich examples
of fixed points and strange loops.

** Loading Required Modules

#+NAME: module-loading
#+begin_src scheme :tangle ../src/generated/modular-systems.scm :mkdirp yes
(use-modules (ice-9 format)
             (srfi srfi-1)     ; List library
             (srfi srfi-9)     ; Record types
             (ice-9 pretty-print))

(display "Modules loaded successfully.\n")
#+end_src

* Musical Scales as Modular Systems

Musical scales provide an intuitive example of modular systems with fixed points and symmetries.
In the standard Western 12-tone system, each octave contains 12 semitones arranged in a cycle.

** The 12-Tone Chromatic Scale

#+NAME: musical-scale-definitions
#+begin_src scheme :tangle ../src/generated/modular-music.scm :mkdirp yes
;; Define the 12-tone chromatic scale
(define note-names #("C" "C#" "D" "D#" "E" "F" "F#" "G" "G#" "A" "A#" "B"))

;; Convert note number to name
(define (note-name note-number)
  (vector-ref note-names (modulo note-number 12)))

;; Musical interval operations
(define (transpose note interval)
  (modulo (+ note interval) 12))

(define (interval between-notes)
  (modulo (- (cadr between-notes) (car between-notes)) 12))

;; Display the chromatic scale
(define (display-chromatic-scale)
  (for-each (lambda (i)
              (format #t "~a " (note-name i)))
            (iota 12))
  (newline))

(display "Chromatic scale: ")
(display-chromatic-scale)
#+end_src

** Musical Transformations and Fixed Points

Fixed points in musical transformations occur when notes remain unchanged after an operation.

#+NAME: musical-transformations
#+begin_src scheme :tangle ../src/generated/modular-music.scm :mkdirp yes
;; Define common musical intervals
(define unison 0)
(define semitone 1)
(define tone 2)
(define minor-third 3)
(define major-third 4)
(define perfect-fourth 5)
(define tritone 6)
(define perfect-fifth 7)
(define minor-sixth 8)
(define major-sixth 9)
(define minor-seventh 10)
(define major-seventh 11)
(define octave 12)

;; Find fixed points of a musical transformation
(define (find-fixed-points transformation)
  (filter (lambda (note)
            (= note (transformation note)))
          (iota 12)))

;; Examine different intervals
(define (transpose-by-tritone note)
  (transpose note tritone))

(define (transpose-by-fifth note)
  (transpose note perfect-fifth))

;; Display fixed points
(format #t "Fixed points of tritone transposition: ")
(for-each (lambda (note)
            (format #t "~a " (note-name note)))
          (find-fixed-points transpose-by-tritone))
(newline)

(format #t "Fixed points of perfect fifth transposition: ")
(for-each (lambda (note)
            (format #t "~a " (note-name note)))
          (find-fixed-points transpose-by-fifth))
(newline)
#+end_src

** The Circle of Fifths

The Circle of Fifths demonstrates how repeated application of the same interval eventually returns to the starting point.

#+NAME: circle-of-fifths
#+begin_src scheme :tangle ../src/generated/modular-music.scm :mkdirp yes
;; Generate the Circle of Fifths
(define (circle-of-fifths starting-note)
  (let loop ((current starting-note)
             (count 0)
             (result '()))
    (if (and (> count 0) (= current starting-note))
        (reverse result)
        (loop (transpose current perfect-fifth)
              (+ count 1)
              (cons current result)))))

(define c-circle (circle-of-fifths 0)) ;; Start from C (0)

(format #t "Circle of Fifths starting from C: ")
(for-each (lambda (note)
            (format #t "~a " (note-name note)))
          c-circle)
(newline)

(format #t "Number of steps to return to C: ~a\n" (length c-circle))
#+end_src

#+NAME: circle-of-fifths-diagram
#+begin_src mermaid :file ../images/diagrams/circle-of-fifths.png :tangle ../docs/diagrams/circle-of-fifths.mmd :mkdirp yes
graph TB
    C((C)) --> G((G))
    G --> D((D))
    D --> A((A))
    A --> E((E))
    E --> B((B))
    B --> "F#"(("F#"))
    "F#" --> "C#"(("C#"))
    "C#" --> "G#"(("G#"))
    "G#" --> "D#"(("D#"))
    "D#" --> "A#"(("A#"))
    "A#" --> F((F))
    F --> C
    
    style C fill:#f9f,stroke:#333,stroke-width:4px
#+end_src

* Directional Systems

Compass directions form another familiar modular system with symmetries and fixed points.

** Compass Directions and Rotational Symmetry

#+NAME: compass-directions
#+begin_src scheme :tangle ../src/generated/modular-directions.scm :mkdirp yes
;; Define compass directions
(define directions #("North" "East" "South" "West"))

(define (direction-name dir)
  (vector-ref directions (modulo dir 4)))

;; Direction transformations
(define (turn-right dir)
  (modulo (+ dir 1) 4))

(define (turn-left dir)
  (modulo (- dir 1) 4))

(define (turn-around dir)
  (modulo (+ dir 2) 4))

;; Helper to apply a function multiple times
(define (iterate n f x)
  (if (= n 0)
      x
      (iterate (- n 1) f (f x))))

;; Explore fixed points 
(define (explore-direction-transformations)
  (for-each 
   (lambda (dir)
     (format #t "Starting from ~a:\n" (direction-name dir))
     (format #t "  Turn right 4 times: ~a\n" 
             (direction-name (iterate 4 turn-right dir)))
     (format #t "  Turn left 4 times: ~a\n" 
             (direction-name (iterate 4 turn-left dir)))
     (format #t "  Turn around twice: ~a\n" 
             (direction-name (iterate 2 turn-around dir))))
   (iota 4)))

(explore-direction-transformations)
#+end_src

#+NAME: compass-diagram
#+begin_src mermaid :file ../images/diagrams/compass-directions.png :tangle ../docs/diagrams/compass-directions.mmd :mkdirp yes
graph TB
    N((North)) --> |"turn right"| E((East))
    E --> |"turn right"| S((South))
    S --> |"turn right"| W((West))
    W --> |"turn right"| N
    
    N2((North)) --> |"turn around"| S2((South))
    S2 --> |"turn around"| N2
    E2((East)) --> |"turn around"| W2((West))
    W2 --> |"turn around"| E2
#+end_src

* Modular Arithmetic and Clock Systems

Clock systems demonstrate modular arithmetic with different fixed point properties.

** 12-Hour and 24-Hour Clocks

#+NAME: clock-systems
#+begin_src scheme :tangle ../src/generated/modular-clocks.scm :mkdirp yes
;; Clock arithmetic operations
(define (clock-plus-n clock-hours n)
  (modulo (+ clock-hours n) clock-hours))

;; Check for fixed points
(define (fixed-points-of-plus-n clock-hours n)
  (filter (lambda (hour)
            (= hour (clock-plus-n clock-hours hour n)))
          (iota clock-hours)))

;; Explore 12-hour clock
(format #t "In a 12-hour clock:\n")
(format #t "  Fixed points of +12 hours: ~a\n" 
        (fixed-points-of-plus-n 12 12))
(format #t "  Fixed points of +6 hours: ~a\n" 
        (fixed-points-of-plus-n 12 6))
(format #t "  Fixed points of +4 hours: ~a\n" 
        (fixed-points-of-plus-n 12 4))
(format #t "  Fixed points of +1 hour: ~a\n" 
        (fixed-points-of-plus-n 12 1))

;; Explore 24-hour clock
(format #t "\nIn a 24-hour clock:\n")
(format #t "  Fixed points of +12 hours: ~a\n" 
        (fixed-points-of-plus-n 24 12))
(format #t "  Fixed points of +6 hours: ~a\n" 
        (fixed-points-of-plus-n 24 6))
(format #t "  Fixed points of +8 hours: ~a\n" 
        (fixed-points-of-plus-n 24 8))

;; General pattern
(define (explain-fixed-point-pattern n m)
  (let ((d (gcd n m)))
    (format #t "\nGeneral pattern: gcd(~a,~a) = ~a\n" n m d)
    (format #t "When we add ~a hours in a ~a-hour clock:\n" m n)
    (cond
     ((= d 1) 
      (format #t "  No fixed points (gcd is 1)\n"))
     ((= d n) 
      (format #t "  All hours are fixed points (clock modulus divides the added value)\n"))
     (else
      (format #t "  Fixed points are at: ")
      (for-each (lambda (i) (format #t "~a " (* i (/ n d))))
                (iota d))
      (format #t "\n  (multiples of ~a up to ~a)\n" (/ n d) n)))))

(explain-fixed-point-pattern 12 12)
(explain-fixed-point-pattern 12 6)
(explain-fixed-point-pattern 12 4)
(explain-fixed-point-pattern 12 5)
(explain-fixed-point-pattern 24 12)
#+end_src

* Mirror Reflections and Symmetry Groups

Reflections in 2D space create another kind of modular system with fascinating fixed points.

** Mirror Operations in 2D Space

#+NAME: mirror-reflections
#+begin_src scheme :tangle ../src/generated/modular-mirrors.scm :mkdirp yes
;; Define a 2D point
(define-record-type <point>
  (make-point x y)
  point?
  (x point-x)
  (y point-y))

(define (point=? p1 p2)
  (and (= (point-x p1) (point-x p2))
       (= (point-y p1) (point-y p2))))

;; Mirror reflections
(define (reflect-x point)
  (make-point (point-x point) (- (point-y point))))

(define (reflect-y point)
  (make-point (- (point-x point)) (point-y point)))

(define (reflect-origin point)
  (make-point (- (point-x point)) (- (point-y point))))

(define (rotate-180 point)
  (reflect-origin point))

;; Check for fixed points
(define (fixed-point? transform point)
  (point=? point (transform point)))

;; Analyze some points
(define test-points
  (list (make-point 3 4)    ;; Regular point
        (make-point 5 0)    ;; Point on x-axis
        (make-point 0 7)    ;; Point on y-axis
        (make-point 0 0)))  ;; Origin

(define (analyze-reflection-fixed-points)
  (for-each
   (lambda (point)
     (format #t "Point (~a,~a):\n" (point-x point) (point-y point))
     (format #t "  Fixed point of x-reflection? ~a\n" 
             (fixed-point? reflect-x point))
     (format #t "  Fixed point of y-reflection? ~a\n" 
             (fixed-point? reflect-y point))
     (format #t "  Fixed point of origin-reflection? ~a\n" 
             (fixed-point? reflect-origin point)))
   test-points))

(analyze-reflection-fixed-points)
#+end_src

#+NAME: reflection-diagram
#+begin_src mermaid :file ../images/diagrams/reflections.png :tangle ../docs/diagrams/reflections.mmd :mkdirp yes
graph TB
    subgraph "X-Axis Reflection"
    P1["(x,y)"] --> |"reflect-x"| P2["(x,-y)"]
    P3["(x,0)"] --> |"reflect-x"| P3
    end
    
    subgraph "Y-Axis Reflection"
    Q1["(x,y)"] --> |"reflect-y"| Q2["(-x,y)"]
    Q3["(0,y)"] --> |"reflect-y"| Q3
    end
    
    subgraph "Origin Reflection"
    R1["(x,y)"] --> |"reflect-origin"| R2["(-x,-y)"]
    R3["(0,0)"] --> |"reflect-origin"| R3
    end
#+end_src

* Dihedral Groups: The Unifying Structure

All these modular systems can be understood through the mathematical concept of dihedral groups.

** Understanding Dihedral Groups

#+NAME: dihedral-groups
#+begin_src scheme :tangle ../src/generated/modular-dihedral.scm :mkdirp yes
;; Dihedral group operations for D_n
(define (make-dihedral-group n)
  ;; Elements are represented as pairs (i, j) where:
  ;; - i is the rotation index (0 to n-1)
  ;; - j is 0 for rotation, 1 for reflection
  
  ;; Identity element
  (define identity '(0 0))
  
  ;; Group operation (multiplication)
  (define (multiply a b)
    (let ((a-rot (car a))
          (a-ref (cadr a))
          (b-rot (car b))
          (b-ref (cadr b)))
      (if (= a-ref 0)
          ;; a is a rotation
          (list (modulo (+ a-rot b-rot) n) b-ref)
          ;; a is a reflection
          (list (modulo (- a-rot b-rot) n) (modulo (+ a-ref b-ref) 2)))))
  
  ;; Get all elements of the group
  (define (elements)
    (append
     ;; Rotations
     (map (lambda (i) (list i 0)) (iota n))
     ;; Reflections
     (map (lambda (i) (list i 1)) (iota n))))
  
  ;; Find fixed points of a group action
  (define (fixed-points element)
    (filter
     (lambda (point)
       (equal? point (multiply element point)))
     (elements)))
  
  ;; Return the group interface
  (lambda (message . args)
    (case message
      ((elements) (elements))
      ((multiply) (apply multiply args))
      ((identity) identity)
      ((fixed-points) (apply fixed-points args))
      (else (error "Unknown message" message)))))

;; Create and analyze dihedral groups
(define d4 (make-dihedral-group 4))  ;; Square symmetry / compass directions
(define d12 (make-dihedral-group 12)) ;; Dodecagon symmetry / musical notes

;; Show examples
(format #t "Dihedral group D4 (square symmetry / compass directions):\n")
(format #t "  Elements: ~a\n" (d4 'elements))
(format #t "  D4 identity: ~a\n" (d4 'identity))
(format #t "  Example multiplication: ~a\n" 
        (d4 'multiply '(1 0) '(2 1)))

(format #t "\nD4 fixed points analysis:\n")
(let ((rot-90 '(1 0))     ;; 90° rotation
      (rot-180 '(2 0))    ;; 180° rotation
      (reflection '(0 1))) ;; Reflection
  (format #t "  Fixed points of 90° rotation: ~a\n" 
          (d4 'fixed-points rot-90))
  (format #t "  Fixed points of 180° rotation: ~a\n" 
          (d4 'fixed-points rot-180))
  (format #t "  Fixed points of reflection: ~a\n" 
          (d4 'fixed-points reflection)))

(format #t "\nDihedral group D12 (dodecagon symmetry / musical notes):\n")
(format #t "  Fixed points of tritone (6-step rotation): ~a\n" 
        (d12 'fixed-points '(6 0)))
(format #t "  Fixed points of perfect fifth (7-step rotation): ~a\n" 
        (d12 'fixed-points '(7 0)))
#+end_src

* A GEB-Style Dialogue: "The Whispered Conversation"

#+NAME: geb-dialogue
#+begin_src mermaid :file ../images/diagrams/geb-dialogue.png :tangle ../docs/diagrams/geb-dialogue.mmd :mkdirp yes
graph TD
    subgraph "The Whispered Conversation between Music and Mirrors"
    A["Achilles: I've been pondering something quite curious.
    When I play a sequence of perfect fifths on the piano - 
    C to G to D to A and so on - I eventually come back to C, 
    but it takes 12 steps to do so."]
    
    B["Tortoise: Indeed! And do you know what happens when 
    you apply a tritone interval repeatedly?"]
    
    C["Achilles: Let's see... C to F#, then F# to... well, 
    back to C! It cycles after just two steps!"]
    
    D["Tortoise: Now imagine looking into a mirror. If you 
    place yourself on the line of symmetry, you become your 
    own reflection - a fixed point of the mirror transformation."]
    
    E["Achilles: Just like C and F# are fixed points of the 
    tritone transposition!"]
    
    F["Tortoise: Precisely! And if you look at reflections in 
    two perpendicular mirrors, the only point that remains fixed 
    is the intersection of the mirrors - the origin of the system."]
    
    G["Achilles: These are all strange loops! The system folds 
    back on itself, creating fixed points where movement appears 
    as stillness."]
    
    H["Tortoise: And that, my friend, is the hidden harmony that 
    connects music, direction, and reflection - all manifestations 
    of the same mathematical structure."]
    
    A --> B --> C --> D --> E --> F --> G --> H
    end
#+end_src

* Connecting to Category Theory

These modular systems connect deeply to category theory concepts:

1. The symmetry operations form categories where objects are states and morphisms are transformations
2. Fixed points correspond to morphisms where f(x) = x
3. The cyclic nature creates endomorphisms that, when composed with themselves enough times, yield the identity

#+NAME: category-connection
#+begin_src mermaid :file ../images/diagrams/modular-category.png :tangle ../docs/diagrams/modular-category.mmd :mkdirp yes
graph TD
    subgraph "Category Theory Connection"
    A["Modular System"] --> |"forms"| B["Category"]
    B --> |"contains"| C["Endomorphisms"]
    C --> |"may have"| D["Fixed Points"]
    C --> |"compose to"| E["Identity (after n iterations)"]
    D --> |"creates"| F["Strange Loops"]
    E --> |"demonstrates"| F
    F --> |"exhibits"| G["Self-Reference"]
    G --> |"models"| A
    end
#+end_src

* Exercises

1. Implement the group of symmetries for a regular pentagon (D5) and find the fixed points of each operation.

2. Explore the "circle of thirds" in music and compare its cycle length to the circle of fifths. Why are they different?

3. Create a visualization of fixed points in a Cartesian plane under various transformations (rotations, reflections, etc.).

4. Investigate modular systems in different bases (base-10, base-60 for time, etc.) and find patterns in their fixed points.

5. Design a graphical interface that demonstrates these modular systems interactively.
