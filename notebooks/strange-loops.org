#+TITLE: Strange Loops and Self-Reference in Category Theory
#+AUTHOR: Aidan Pace
#+EMAIL: apace@defrecord.com
#+DATE: 2025-05-12
#+PROPERTY: header-args:scheme :results output :exports both :eval yes :noweb yes :tangle yes

#+PROPERTY: header-args:mermaid :file ../images/diagrams/:results file :exports both
#+OPTIONS: toc:3 num:3 
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

# Tangle destination for Scheme code
#+PROPERTY: tangle-dir "../src/generated/"

* Introduction to Strange Loops

Strange loops are integral to many systems that exhibit self-reference, recursion, and emergent complexity. As described by Douglas Hofstadter, a strange loop is a phenomenon where moving through a hierarchical system brings you back to your starting point, creating a kind of paradoxical self-reference.

Let's begin by loading our category theory module:

#+NAME: module-loading
#+begin_src scheme :tangle "../src/generated/strange-loops-module.scm" :mkdirp yes
(add-to-load-path "../src/guile")
(use-modules (category))

(display "Category theory module loaded successfully.\n")
#+end_src

* Category Theory and Self-Reference

Category theory provides a rich formal framework for understanding self-reference, strange loops, and recursive structures.

** Core Categorical Concepts of Self-Reference

*** Fixed Points of Endofunctors

An endofunctor is a functor from a category to itself. A fixed point of an endofunctor $F: \mathcal{C} \to \mathcal{C}$ is an object $X$ where $F(X) \cong X$.

This represents the fundamental form of self-reference in category theory - a structure that, when transformed by $F$, remains essentially the same.

#+NAME: fixed-point-endofunctor
#+begin_src scheme :tangle "../src/generated/strange-loops-types.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; Define a simple category
(define a (make-object "A"))
(define b (make-object "B"))
(define c (make-object "C"))
(define f-ab (make-morphism "f_AB" a b))
(define f-bc (make-morphism "f_BC" b c))
(define f-ca (make-morphism "f_CA" c a))

;; This forms a loop: A → B → C → A
(display "Category with a loop structure:\n")
(display "Objects: A, B, C\n")
(display "Morphisms: f_AB: A → B, f_BC: B → C, f_CA: C → A\n")

;; Define a simple endofunctor that rotates the objects
(define (rotate-functor obj)
  (cond ((equal? obj a) b)
        ((equal? obj b) c)
        ((equal? obj c) a)
        (else (error "Object not in category"))))

;; Applying the functor twice gives a different object
(display "\nApplying rotate-functor once:\n")
(display "F(A) = ") (display (rotate-functor a)) (newline)
(display "F(B) = ") (display (rotate-functor b)) (newline)
(display "F(C) = ") (display (rotate-functor c)) (newline)

;; Applying the functor three times gives the original object (fixed point)
(display "\nApplying rotate-functor three times (composing with itself twice):\n")
(define (rotate-3-times obj)
  (rotate-functor (rotate-functor (rotate-functor obj))))

(display "F³(A) = ") (display (rotate-3-times a)) (newline)
(display "F³(B) = ") (display (rotate-3-times b)) (newline)
(display "F³(C) = ") (display (rotate-3-times c)) (newline)
#+end_src

*** Y Combinator and Fixed Point Operators

The Y combinator is a higher-order function that finds fixed points of functions, enabling recursion without explicit self-reference.

#+NAME: y-combinator
#+begin_src scheme :tangle "../src/generated/strange-loops-types.scm" :noweb yes :mkdirp yes
;; The Y combinator implementation
(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (y) ((x x) y))))
     (lambda (x) (f (lambda (y) ((x x) y)))))))

;; Using the Y combinator to implement factorial
(define factorial
  (Y (lambda (f)
       (lambda (n)
         (if (= n 0)
             1
             (* n (f (- n 1))))))))

(display "\nFactorial function implemented using Y combinator:\n")
(display "factorial(5) = ") (display (factorial 5)) (newline)
#+end_src

*** Diagonal Arguments and Diagonalization

Diagonal arguments use self-application to construct objects that differ from all objects in a given collection. These create self-referential paradoxes similar to "This statement is false."

#+NAME: diagonal-argument
#+begin_src scheme :tangle "../src/generated/strange-loops-godel.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; Simulate a version of Cantor's diagonal argument
(define (make-infinite-binary-sequence n)
  (lambda (i)
    (if (= i n) 0 1)))  ;; 0 at position n, 1 elsewhere

;; Create a "list" of sequences
(display "Simulating a diagonal argument:\n")
(display "Imagine an enumeration of infinite binary sequences:\n")
(for-each (lambda (n)
            (display "Sequence ")
            (display n)
            (display ": ")
            (display (map (make-infinite-binary-sequence n) '(0 1 2 3 4 5)))
            (newline))
          '(0 1 2 3 4 5))

;; The diagonal sequence
(define (diagonal-sequence i)
  ((make-infinite-binary-sequence i) i))

;; The anti-diagonal sequence (differs from every sequence at position n)
(define (anti-diagonal i)
  (if (= (diagonal-sequence i) 0) 1 0))

(display "\nDiagonal sequence (first 6 terms): ")
(display (map diagonal-sequence '(0 1 2 3 4 5)))
(newline)

(display "Anti-diagonal sequence (first 6 terms): ")
(display (map anti-diagonal '(0 1 2 3 4 5)))
(newline)

(display "\nThe anti-diagonal sequence differs from every sequence in our enumeration,\n")
(display "at position n it differs from the nth sequence.\n")
#+end_src

*** Recursive Types as Fixed Points

In programming, recursive data types can be understood as fixed points of type constructors.

#+NAME: recursive-types
#+begin_src scheme :tangle "../src/generated/strange-loops-fixed-points.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; Define a simple list type recursively
;; List(A) = 1 + A × List(A)  (1 represents the empty list)
(display "Defining a recursive list type:\n")
(display "List(A) = 1 + A × List(A)\n")

;; Simple implementation of lists
(define (empty-list? lst) (null? lst))
(define (cons-list hd tl) (cons hd tl))
(define (head-list lst) (car lst))
(define (tail-list lst) (cdr lst))

;; Create a list
(define sample-list (cons-list 1 (cons-list 2 (cons-list 3 '()))))

(display "\nExample list: ") (display sample-list) (newline)
(display "Head: ") (display (head-list sample-list)) (newline)
(display "Tail: ") (display (tail-list sample-list)) (newline)

;; Define a binary tree type recursively
;; Tree(A) = 1 + A × Tree(A) × Tree(A)  (1 represents the empty tree)
(display "\nDefining a recursive binary tree type:\n")
(display "Tree(A) = 1 + A × Tree(A) × Tree(A)\n")

;; Simple implementation of binary trees
(define (make-empty-tree) '())
(define (make-tree value left right) (list value left right))
(define (empty-tree? tree) (null? tree))
(define (tree-value tree) (car tree))
(define (tree-left tree) (cadr tree))
(define (tree-right tree) (caddr tree))

;; Create a tree
(define sample-tree 
  (make-tree 1
             (make-tree 2 (make-empty-tree) (make-empty-tree))
             (make-tree 3 (make-empty-tree) (make-empty-tree))))

(display "\nTree values (flattened): ")
(define (tree-values tree)
  (if (empty-tree? tree)
      '()
      (append (list (tree-value tree))
              (tree-values (tree-left tree))
              (tree-values (tree-right tree)))))

(display (tree-values sample-tree)) (newline)
#+end_src

* Types of Strange Loops

Strange loops appear in various forms:

1. **Direct Self-Reference**: An entity that refers to itself
2. **Paradoxical Loops**: Structures that lead to contradictions
3. **Tangled Hierarchies**: Systems where levels that should be separate become intertwined

Let's explore some of these from a categorical perspective:

#+NAME: strange-loop-types
#+begin_src scheme :tangle "../src/generated/strange-loops-tangled.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; Define a simple category
(define a (make-object "A"))
(define b (make-object "B"))
(define c (make-object "C"))

;; Create morphisms for direct self-reference
(define f-aa (make-morphism "f_AA" a a))  ;; Endomorphism

;; Create morphisms for a loop
(define f-ab (make-morphism "f_AB" a b))
(define f-bc (make-morphism "f_BC" b c))
(define f-ca (make-morphism "f_CA" c a))

;; Display the different types of strange loops
(display "Types of Strange Loops:\n")

(display "\n1. Direct Self-Reference:\n")
(display "   Endomorphism f_AA: A → A\n")
(display "   This is a morphism from an object to itself.\n")

(display "\n2. Circular Loop:\n")
(display "   f_AB: A → B, f_BC: B → C, f_CA: C → A\n")
(display "   Following these morphisms forms a loop: A → B → C → A\n")

;; Simulating a level-crossing strange loop
(display "\n3. Tangled Hierarchy (simulated):\n")
(display "   Consider a category of 'levels' where:\n")
(display "   - Level 1 contains basic elements\n")
(display "   - Level 2 contains operations on Level 1 elements\n")
(display "   - Level 3 contains meta-operations on Level 2 operations\n")
(display "   A tangled hierarchy occurs when an element at Level 3\n")
(display "   is equivalent to an element at Level 1, creating a loop\n")
(display "   across levels that should be hierarchically separate.\n")
#+end_src

* Gödel's Incompleteness and Category Theory

Kurt Gödel's Incompleteness Theorems demonstrate a profound strange loop at the heart of mathematical systems. Gödel showed that in any consistent formal system powerful enough to express basic arithmetic, there are statements that cannot be proven or disproven within the system.

This self-reference has categorical interpretations:

#+NAME: godel-categorical
#+begin_src scheme :tangle "../src/generated/strange-loops-godel.scm" :noweb yes :mkdirp yes
;; Simulating a simplified version of Gödel's self-referential statement
(display "\nGödel's Incompleteness and Self-Reference:\n")
(display "Gödel encoded the statement 'This statement is not provable'\n")
(display "within a formal mathematical system.\n")

;; Gödel numbering (simplified simulation)
(define (godel-encode statement)
  (apply + (map char->integer (string->list statement))))

(define statement "This statement is not provable")
(define godel-number (godel-encode statement))

(display "\nExample Gödel numbering:\n")
(display "Statement: ") (display statement) (newline)
(display "Gödel number: ") (display godel-number) (newline)

(display "\nCategorical interpretation:\n")
(display "- Objects: Mathematical statements\n")
(display "- Morphisms: Proofs from one statement to another\n")
(display "- Gödel's statement creates a strange loop because it\n")
(display "  refers to its own provability, crossing levels between\n")
(display "  the formal system and statements about the system.\n")
#+end_src

* Fixed Points and Strange Loops

Fixed points provide a precise mathematical way to understand strange loops. A fixed point of a function f is a value x where f(x) = x. In category theory, fixed points take on a richer structure.

Let's explore different types of fixed points and how they relate to strange loops:

#+NAME: fixed-points
#+begin_src scheme :tangle "../src/generated/strange-loops-fixed-points.scm" :noweb yes :mkdirp yes
;; Iterative fixed point finder for numeric functions
(define (find-fixed-point f initial-guess max-iterations)
  (define tolerance 0.0001)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  
  (define (iterate guess iteration)
    (if (= iteration max-iterations)
        guess
        (let ((next (f guess)))
          (if (close-enough? guess next)
              next
              (iterate next (+ iteration 1))))))
  
  (iterate initial-guess 0))

;; Example functions with fixed points
(display "Fixed Points of Functions:\n")

;; cos(x) has a fixed point around 0.739
(display "\n1. Fixed point of cos(x):\n")
(define cos-fixed-point (find-fixed-point cos 1.0 100))
(display "   x = cos(x) ≈ ") (display cos-fixed-point) (newline)
(display "   Verification: cos(") (display cos-fixed-point) 
(display ") = ") (display (cos cos-fixed-point)) (newline)

;; √x has fixed points at 0 and 1
(define (sqrt-function x) (sqrt x))
(display "\n2. Fixed points of √x:\n")
(define sqrt-fixed-point-1 (find-fixed-point sqrt-function 0.5 100))
(display "   x = √x ≈ ") (display sqrt-fixed-point-1) (newline)
(display "   Verification: √") (display sqrt-fixed-point-1) 
(display " = ") (display (sqrt sqrt-fixed-point-1)) (newline)

;; x² has fixed points at 0 and 1
(define (square x) (* x x))
(display "\n3. Fixed points of x²:\n")
(define square-fixed-point-1 (find-fixed-point square 0.5 100))
(display "   x = x² ≈ ") (display square-fixed-point-1) (newline)
(display "   Verification: ") (display square-fixed-point-1) 
(display "² = ") (display (square square-fixed-point-1)) (newline)

(define square-fixed-point-2 (find-fixed-point square 1.5 100))
(display "   Another fixed point x = x² ≈ ") (display square-fixed-point-2) (newline)
(display "   Verification: ") (display square-fixed-point-2) 
(display "² = ") (display (square square-fixed-point-2)) (newline)

(display "\nConnection to strange loops:\n")
(display "Fixed points create self-reference where the output of a\n")
(display "transformation equals its input, forming a perfect loop.\n")
#+end_src

* Tangled Hierarchies

Hofstadter describes "tangled hierarchies" where levels that should be separate become intertwined, creating strange loops. This concept has parallels in category theory through functors and natural transformations.

Let's explore this with an example:

#+NAME: tangled-hierarchies
#+begin_src scheme :tangle "../src/generated/strange-loops-tangled.scm" :noweb yes :mkdirp yes
;; Simulation of a tangled hierarchy using category levels
(display "Tangled Hierarchies - Categorical Example:\n")

(display "\nLevel structure (simplified):\n")
(display "Level 1: Category C1 of basic objects\n")
(display "Level 2: Category C2 of functors between C1 objects\n")
(display "Level 3: Category C3 of natural transformations between functors\n")

(display "\nIn a normal hierarchy, each level operates on the level below it.\n")

(display "\nIn a tangled hierarchy, there's a way to interpret:\n")
(display "- Elements of Level 3 as elements of Level 1\n")
(display "- This creates a loop where following the hierarchy upward\n")
(display "  eventually brings you back to the bottom\n")

(display "\nCategorical example:\n")
(display "- Level 1: Category C\n")
(display "- Level 2: Functor category [C,C] of endofunctors on C\n")
(display "- Level 3: Natural transformations between endofunctors\n")
(display "Tangling: A representation of natural transformations as objects in C\n")
#+end_src

* Implementing a Strange Loop System

Let's create a more elaborate example: a system that exhibits strange loop behavior by modeling itself and creating self-reference.

#+NAME: strange-loop-system
#+begin_src scheme :tangle "../src/generated/strange-loops-system.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; Define a simple system of symbols and rules (a kind of formal system)
(display "A Self-Referential Symbol System:\n")

;; Define our alphabet of symbols
(define symbols '(a b c d))

;; Rules for transforming symbols (simplified production rules)
(define (apply-rule symbol)
  (case symbol
    ((a) 'b)
    ((b) 'c)
    ((c) 'd)
    ((d) 'a)
    (else symbol)))

;; Function to apply rules to a string of symbols
(define (apply-rules-to-string str)
  (map apply-rule str))

;; Create a simple string
(define initial-string '(a b a c))

;; Show multiple applications of the rules
(display "\nInitial string: ") (display initial-string) (newline)

(define step-1 (apply-rules-to-string initial-string))
(display "After 1 step: ") (display step-1) (newline)

(define step-2 (apply-rules-to-string step-1))
(display "After 2 steps: ") (display step-2) (newline)

(define step-3 (apply-rules-to-string step-2))
(display "After 3 steps: ") (display step-3) (newline)

(define step-4 (apply-rules-to-string step-3))
(display "After 4 steps: ") (display step-4) (newline)

;; Demonstrate self-reference by encoding the rules in the system itself
(display "\nSelf-Reference in the System:\n")

;; Encode the rules as a string: ((a b) (b c) (c d) (d a))
(define rule-encoding '((a b) (b c) (c d) (d a)))

;; A meta-rule that reads rule encodings and applies them
(define (apply-meta-rule encoded-rules symbol)
  (let ((matching-rule (find (lambda (rule) (eq? (car rule) symbol)) 
                             encoded-rules)))
    (if matching-rule
        (cadr matching-rule)
        symbol)))

;; Apply meta-rules to the original string
(define (apply-meta-rules encoded-rules str)
  (map (lambda (symbol) (apply-meta-rule encoded-rules symbol)) str))

;; Show that the meta-system produces the same results
(display "Using meta-rules with encoded ruleset:\n")
(define meta-step-1 (apply-meta-rules rule-encoding initial-string))
(display "After 1 step: ") (display meta-step-1) (newline)

(define meta-step-2 (apply-meta-rules rule-encoding meta-step-1))
(display "After 2 steps: ") (display meta-step-2) (newline)

;; The strange loop: we can apply the meta-system to the rule encoding itself
(display "\nStrange Loop: Applying system to its own rules:\n")
(display "Original rules: ") (display rule-encoding) (newline)

;; Apply the transformation to the first element of each rule
(define transformed-rules
  (map (lambda (rule)
         (list (apply-meta-rule rule-encoding (car rule))
               (cadr rule)))
       rule-encoding))

(display "Transformed rules: ") (display transformed-rules) (newline)

(display "\nThis demonstrates a strange loop because the system can\n")
(display "operate on its own rules, creating a self-referential structure.\n")
#+end_src

* Strange Loops and Consciousness

Hofstadter proposes that consciousness itself is a strange loop - the brain creates a model of itself, which creates a kind of self-reference that leads to consciousness and "I".

While we can't implement consciousness, we can create a simple model of self-awareness:

#+NAME: consciousness-loops
#+begin_src scheme :tangle "../src/generated/strange-loops-consciousness.scm" :noweb yes :mkdirp yes
;; Load the category module
<<module-loading>>

;; A simplified model of consciousness as a strange loop
(display "A Simplified Model of Self-Awareness:\n")

;; Define a system that has:
;; 1. A base level of "perceptions"
;; 2. A model of itself
;; 3. The ability to model its own modeling

;; Perceptions (base level data)
(define perceptions '(red circle large moving))

;; A simple model: categorize perceptions
(define (create-model perceptions)
  (list 'model
        (list 'color (find (lambda (p) (member p '(red green blue))) perceptions))
        (list 'shape (find (lambda (p) (member p '(circle square triangle))) perceptions))
        (list 'size (find (lambda (p) (member p '(large medium small))) perceptions))
        (list 'motion (find (lambda (p) (member p '(moving stationary))) perceptions))))

;; Create model from perceptions
(define model (create-model perceptions))

(display "\nBase perceptions: ") (display perceptions) (newline)
(display "Model of perceptions: ") (display model) (newline)

;; Self-awareness: the system models itself modeling
(define (create-self-model base-model)
  (list 'self-model
        (list 'modeling-activity 'active)
        (list 'current-model base-model)
        (list 'model-complexity (length base-model))
        (list 'aware-of-modeling #t)))

;; Create self-model
(define self-model (create-self-model model))

(display "\nSelf-model (modeling itself modeling): ") 
(display self-model) (newline)

;; The strange loop: The system can update its perceptions to include awareness of itself
(define updated-perceptions 
  (append perceptions 
          (list 'self-aware 'modeling)))

(display "\nUpdated perceptions (including self-awareness): ") 
(display updated-perceptions) (newline)

;; And can now model those new perceptions, including the perception of itself
(define updated-model (create-model updated-perceptions))
(display "Updated model (including modeling itself): ") 
(display updated-model) (newline)

(display "\nThis demonstrates a (simplified) strange loop where the system's model\n")
(display "of itself becomes part of what it models, creating a self-referential loop.\n")
(display "Hofstadter argues consciousness emerges from this kind of self-reference.\n")
#+end_src


* Self-Reference in Category Theory: Core Concepts

Category theory provides a formal framework for understanding self-reference, strange loops, and recursive structures:

** Fixed Points of Endofunctors

- **Core concept**: A fixed point of an endofunctor $F: \mathcal{C} \to \mathcal{C}$ is an object $X$ where $F(X) \cong X$
- **Self-reference connection**: A structure that, when transformed, remains essentially the same
- **Examples**: Recursive data types as fixed points of type constructors
- **Mathematical foundation**: Initial algebras and terminal coalgebras

** Y Combinator and Fixed Point Operators

- **Core concept**: The Y combinator finds fixed points of functions
- **Self-reference connection**: Enables recursion without explicit self-reference
- **Category theory view**: Finding fixed points of endofunctors in the category of types

** Diagonal Arguments and Diagonalization

- **Core concept**: Uses self-application to construct objects that differ from all objects in a collection
- **Self-reference connection**: Creates self-referential paradoxes similar to "This statement is false"
- **Category theory formulation**: The diagonal functor $\Delta: \mathcal{C} \to \mathcal{C} \times \mathcal{C}$ mapping $X$ to $(X,X)$

** Traced Monoidal Categories

- **Core concept**: Categories with a "trace" operation that allows feedback loops
- **Self-reference connection**: Formalizes circular processes where outputs feed back into inputs
- **Applications**: Modeling recursive computations and cyclic data structures

** Recursive Coalgebras and Recursion Schemes

- **Core concept**: Coalgebras for an endofunctor provide a framework for recursive data traversal
- **Self-reference connection**: Capture patterns of recursion over self-referential data structures
- **Key structures**: Catamorphisms (folding), anamorphisms (unfolding), and hylomorphisms

** The Yoneda Lemma and Self-Representation

- **Core concept**: An object is determined by its pattern of relationships with all other objects
- **Self-reference connection**: Creates self-representation where identity emerges from relationships
- **Formal statement**: $\text{Nat}(\text{Hom}(A,-), F) \cong F(A)$

** Reflective Subcategories

- **Core concept**: A subcategory $\mathcal{D}$ of $\mathcal{C}$ is reflective if the inclusion functor $i: \mathcal{D} \to \mathcal{C}$ has a left adjoint
- **Self-reference connection**: Reflection allows objects to "see themselves" in a different context
- **Examples**: Completion constructions and free constructions

** Fixed Point Theorems in Categorical Logic

- **Core concept**: Fixed point theorems formalized in categorical terms
- **Self-reference connection**: Guarantee the existence of self-referential structures
- **Applications**: Proving existence of recursive definitions

** 2-Categories and Higher Reflexivity

- **Core concept**: In higher categories, we have morphisms between morphisms
- **Self-reference connection**: Creates higher-order self-reference where processes act on processes
- **Examples**: Natural transformations between functors

** Adjunctions and Galois Connections

- **Core concept**: Adjunctions represent a kind of duality between functors
- **Self-reference connection**: Create feedback loops between categories
- **Mathematical significance**: Enable translation between domains while preserving structure

* Exercises

1. Implement a fixed-point combinator in a language of your choice and use it to define a recursive function without explicit recursion.

2. Create a simple formal system that can represent statements about itself, similar to Gödel's construction.

3. Implement a data structure that serves as a fixed point of a functor, such as a list or tree type.

4. Create a visualization of a tangled hierarchy using three distinct levels that loop back to the beginning.

5. Implement a "quine" program that produces its own source code as output, and explain how it relates to strange loops.

6. Explore how the Yoneda Lemma creates a kind of self-reference, and implement a simple demonstration in code.

7. Design a system where objects at one level can be represented as collections of objects at a lower level, creating a tangled hierarchy.

8. Implement a simple model of self-reference in a formal system, and show how it can lead to paradoxes or inconsistencies.

* Exercise Workspace

This section provides a dedicated space to work on the exercises. You can modify the code blocks below, execute them, and when you're satisfied with your solutions, you can tangle them to generate the appropriate files.

** Exercise 1 Workspace - Fixed Point Combinator

#+NAME: ex1-fixed-point
#+begin_src scheme :tangle "../src/generated/exercises/strange-loops-ex1-fixed-point.scm" :mkdirp yes
;; Fixed Point Combinator Exercise

;; Y combinator implementation
(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (y) ((x x) y))))
     (lambda (x) (f (lambda (y) ((x x) y)))))))

;; Using Y combinator to define factorial without explicit recursion
(define factorial
  (Y (lambda (fact)
       (lambda (n)
         (if (= n 0)
             1
             (* n (fact (- n 1))))))))

;; Test factorial
(display "Factorial using Y combinator:\n")
(display "factorial(0) = ") (display (factorial 0)) (newline)
(display "factorial(1) = ") (display (factorial 1)) (newline)
(display "factorial(5) = ") (display (factorial 5)) (newline)
(display "factorial(10) = ") (display (factorial 10)) (newline)

;; Using Y combinator to define fibonacci without explicit recursion
(define fibonacci
  (Y (lambda (fib)
       (lambda (n)
         (cond ((= n 0) 0)
               ((= n 1) 1)
               (else (+ (fib (- n 1))
                        (fib (- n 2)))))))))

;; Test fibonacci
(display "\nFibonacci using Y combinator:\n")
(display "fibonacci(0) = ") (display (fibonacci 0)) (newline)
(display "fibonacci(1) = ") (display (fibonacci 1)) (newline)
(display "fibonacci(2) = ") (display (fibonacci 2)) (newline)
(display "fibonacci(3) = ") (display (fibonacci 3)) (newline)
(display "fibonacci(4) = ") (display (fibonacci 4)) (newline)
(display "fibonacci(5) = ") (display (fibonacci 5)) (newline)
(display "fibonacci(10) = ") (display (fibonacci 10)) (newline)

;; Explanation of how Y combinator creates a strange loop
(display "\nExplanation of Y combinator as a strange loop:\n")
(display "The Y combinator creates a strange loop through self-application:\n")
(display "1. It takes a functional F that expects a function as input\n")
(display "2. It creates a fixed point of F - a function f where f = F(f)\n")
(display "3. This is achieved through the self-application (x x)\n")
(display "4. This creates a 'loop' where the function effectively calls itself\n")
(display "   without needing explicit recursion in its definition\n")
#+end_src

** Exercise 5 Workspace - Quine Program

#+NAME: ex5-quine
#+begin_src scheme :tangle "../src/generated/exercises/strange-loops-ex5-quine.scm" :mkdirp yes
;; A quine is a program that produces its own source code as output
;; This demonstrates a strange loop where the program references itself

;; Here's a simple quine in Scheme:
((lambda (x) 
   (display 
    (list x 
          (list 'quote x))))
 '(lambda (x) 
    (display 
     (list x 
           (list 'quote x)))))

;; Explanation:
;; 1. The program consists of a lambda expression applied to its own quoted form
;; 2. When executed, it prints the lambda expression followed by its quoted form
;; 3. This output is exactly the source code of the program
;; 
;; The strange loop here is that:
;; - The program contains a representation of itself (the quoted lambda)
;; - The program uses this self-representation to reproduce itself
;; - This creates a loop where the program's output is its own description
;; 
;; This relates to Hofstadter's strange loops because:
;; - It demonstrates self-reference (the program refers to itself)
;; - It shows how a system can represent itself within itself
;; - It illustrates a kind of tangled hierarchy where the program is both:
;;   a) Code that runs (the executing level)
;;   b) Data that is manipulated (the quoted level)
;;   
;; In categorical terms, a quine demonstrates a fixed point of the
;; "evaluation" function: a program p where eval(p) = p
#+end_src